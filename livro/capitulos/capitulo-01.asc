== Introdução

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Entender a importância do uso de estruturas de dados e os 
conceitos de abstração e encapsulamento
* Conhecer a estrutura básica que será utilizada ao longo do livro 
para representar um elemento em nossas 
estruturas de dados
* Compreender o princípio da indução matemática
____

Computadores podem armazenar e processar grandes volumes de dados. 
Estruturas de dados formais possibilitam aos programadores gerenciar 
conceitualmente os relacionamentos entre os dados utilizados por um 
determinado programa. 
 
Muitas vezes, estruturas de dados específicas nos permitem fazer 
mais,  por exemplo, ordenar mais rápido um grande volume de dados. 
Noutras vezes, utilizamos certas estruturas de dados para fazermos 
menos, por exemplo,  encontrar um determinado elemento em uma 
coleção utilizando o menor número possível de comparações.

Estruturas de dados também oferecem garantias sobre a complexidade 
algorítmica  relacionada às suas operações básicas. Portanto, 
escolher estruturas de dados apropriadas é crucial para o 
desenvolvimento de qualquer software.


WARNING: A escolha das estruturas de dados a serem utilizadas tem 
papel fundamental no desenvolvimento de qualquer software. Uma 
escolha errada pode implicar em perdas de desempenho e em uma maior 
dificuldade na implementação.

Estruturas de dados representam abstrações de alto nível e podem 
fornecer operações para lidar com grupos de dados, incluindo formas 
para adicionar, remover ou localizar elementos. Uma estrutura de 
dados que fornece operações para manipular seus dados é denominada 
*((tipo abstrato de dados))* (muitas vezes  abreviado por TAD). Tipos 
abstratos de dados podem minimizar dependências no código, o que é 
importante quando é preciso realizar alterações no programa. Tais 
estruturas abstraem do programa os detalhes de baixo nível, 
permitindo que o programador concentre-se unicamente em  utilizar a 
estrutura sem precisar conhecer, necessariamente, detalhes sobre sua 
implementação. Além disso, estruturas de dados que apresentam um 
conjunto comum de operações de alto nível podem ser substituídas 
umas pelas outras sem maiores impactos no restante do código de uma 
aplicação.

NOTE: Uma estrutura de dados que fornece operações de alto nível 
para manipular seus elementos é denominada *tipo abstrato de 
dados*.

As principais linguagens de programação estão equipadas com um 
conjunto de tipos de dados, como números inteiros e de ponto 
flutuante, que nos permitem lidar com dados para os quais o 
processador do computador oferece suporte nativo. Estes tipos de 
dados pré-definidos são abstrações do que o processador realmente 
oferece, uma vez que escondem detalhes sobre sua execução e 
limitações.

Por exemplo, quanto utilizamos números de ponto flutuante estamos 
preocupados principalmente com seu valor e com quais operações 
podem ser aplicadas a eles. 

Considere o trecho de código abaixo que calcula o comprimento da 
hipotenusa de um triângulo com catetos a e b.

.Cálculo do comprimento da hipotenusa de um triângulo retângulo de catetos `a` e `b`
[source,c]
----
double c = sqrt(a * a + b * b)
----

O código de máquina gerado a partir do código acima utilizaria 
padrões comuns para computar e acumular o resultado. De fato, estes 
padrões são tão repetitivos que levaram a criação de linguagens 
de programação de alto nível justamente para evitar a redundância 
e para permitir que os programadores possam se preocupar com o que 
está sendo computado ao invés do como está sendo computado.

Dois conceitos muito úteis e inter-relacionados têm um papel 
fundamental neste avanço:

((Encapsulamento)):: Acontece quando um padrão comum de codificação é 
agrupado em uma unidade com nome único e que pode ser parametrizada, 
fornecendo um entendimento de mais alto nível sobre este padrão. 
Por exemplo, a operação de multiplicação requer dois valores 
fonte e escreve o valor do produto destes dois valores em um 
determinado destino. A operação é parametrizada por seus dois 
valores fonte e pelo destino único.

((Abstração)):: É um mecanismo utilizado para esconder detalhes de 
implementação dos usuários. Quando multiplicamos dois números 
não precisamos saber qual a técnica utilizada pelo processador para 
efetivamente multiplicar os números, precisamos apenas conhecer as 
propriedades da operação de multiplicação.

// TODO: Adicionar um nota em detalhes* para explicar as operações
// que são abstraídas:
// Busca o valor endereço de memória, salvar num registrador,
// buscar operando, acionar operação de multiplicação na ULA,
// salvar o resultado no registrador, depois salvar conteúdo
// do registrador no endereço de memória do resultado, etc.

Uma linguagem de programação é tanto uma abstração da máquina 
quanto uma ferramenta para encapsular seus detalhes internos. Quando 
a linguagem de programação encapsula suficientemente bem o 
funcionamento da  máquina um programa escrito nesta linguagem pode 
ser compilado em várias arquiteturas diferentes.

Neste livro nós levamos os conceitos e abstração e encapsulamento 
um passo adiante. Na medida em  que as aplicações começam a ficar 
mais complexas, as abstrações fornecidas pelas linguagens de  
programação se mostram insuficientes e precisam ser estendidas, 
exigindo a construção de  novas abstrações a partir das já 
disponíveis ou a partir de novas abstrações já adicionadas à 
linguagem. Cada vez que adicionamos um novo nível de abstração 
perdemos acesso aos detalhes de implementação do nível inferior. 
Apesar dessa perda de acesso parecer ruim, ela na verdade ajuda a 
lidar com a complexidade, 
pois, no final, estamos interessados em resolver o problema. 

Abstrações e encapsulamento nos permitem  pensar em níveis mais 
altos e isso é fundamental para conseguirmos resolver problemas cada 
vez mais complexos.

=== A estrutura básica de um Nó

A primeira estrutura de dados que vamos estudar é chamada _Nó_. 
Esta é a estrutura básica que utilizaremos para construir todas as 
demais estruturas de dados tratadas neste livro. 

Um _Nó_ é um recipiente ao qual adicionamos um elemento do nosso 
conjunto de dados e um apontador para o próximo _Nó_ (que pode não 
existir). O código a seguir apresenta a definição da estrutura de 
um _Nó_. 

NOTE: Utilizaremos a linguagem C em todo o código fonte apresentado 
neste livro. Além disso, por convenção, nomes de tipos, variáveis 
e funções serão definidos em inglês. Portanto, a nossa estrutura 
de _Nó_ se chama _Node_.

.Definição da estrutura de um Nó e das suas operações básicas.
[source,c,numbered]
----
include::codigo/capitulo-01/node.h[]
----

Todas as operações apresentadas acima possuem complexidade _O_(1). 
O tipo _Element_ pode representar números, cadeias de caracteres, 
objetos, funções ou mesmo outros nós. Essencialmente, pode 
representar qualquer tipo presente na linguagem.

Neste momento, estamos preocupados apenas que o _Nó_ possa armazenar 
valores de alguma forma.  O tipo do dado, neste momento, não é 
relevante. Em algumas linguagens de programação, o  tipo não 
precisa ser definido (linguagens  dinamicamente tipadas como Scheme, 
Smalltalk ou Python).  Em outras linguagens o tipo pode  precisar ser 
definido explicitamente, (linguagens estaticamente  tipadas como C).  
Há ainda uma terceira opção, na qual a decisão sobre o tipo do 
elemento  pode ser atrasada até  o momento em que o tipo é 
efetivamente utilizado (linguagens que suportam tipos genéricos como 
C++ e Java). 

Cada uma das operações especificadas pode ser implementada de forma 
relativamente simples:

.Implementação das operações básicas aplicáveis à estrutura de Nó
[source,c,numbered]
----
include::codigo/capitulo-01/node.c[]
----

Neste momento, estamos mais preocupados com as operações e a 
estratégia de implementação do que com a estrutura propriamente 
dita e sua implementação de baixo nível. Por exemplo, estamos mais 
preocupados com o requisito de tempo especificado, que determina que 
todas as operações devam tomar tempo _O_(1).  As implementações 
acima atendem este requisito uma vez que a quantidade de tempo que 
cada operação toma é constante. Uma outra forma de pensar sobre 
operações com tempo constante é vê-las como operações cuja  
análise independe de qualquer variável. 

NOTE: A notação _O_(1) será formalmente apresentada no próximo 
capítulo. Por hora, é suficiente assumir que ela significa tempo 
constante.

Uma vez que o nó representa apenas um recipiente para um valor e 
para um apontador para outro nó, não deve ser surpreendente o quão 
trivial são a estrutura de dados propriamente dita e a 
implementação de  suas operações.
 

=== Encadeando Nós
Apesar da estrutura de um nó ser bastante simples, ela nos permite 
resolver problemas bastante interessantes. Porém, primeiro vamos dar 
uma olhada em um programa que não precisa utilizar a nossa estrutura 
de nó. 

O programa a seguir lê da entrada padrão uma série de números 
inteiros até encontrar o final da entrada e imprime o maior valor 
lido e a média de todos os números:

.Código para encontrar o maior elemento e a média de um conjunto de valores lidos da entrada padrão
[source,c,numbered]
----
include::codigo/capitulo-01/maxemedia.c[]
----

Considere agora resolver uma tarefa similar: ler uma série de 
números até o final da entrada e imprimir o maior número e a 
média de todos os números que são divisores inteiros do maior 
número. 

Este problema é diferente do problema anterior porque é possível 
que o maior número seja o último a ser fornecido, portanto, se 
precisamos calcular a média dos divisores do maior número 
precisaremos armazenar todos os números lidos. Poderíamos utilizar 
variáveis para armazenar os números lidos porém esta só seria uma 
solução se soubéssemos, a priori, quantos números seriam 
fornecidos. 

Por exemplo, suponha que criemos, para armazenar o estado do 
programa, 200 variáveis inteiras, cada uma com 64 bits. Mesmo a 
implementação mais eficiente só poderá computar os resultados 
para 2^64*200^ entradas  diferentes. Apesar desse ser um número 
muito grande de combinações, uma lista com 300 números de 64 bits  
exigiria ainda mais bits para ser codificada. 

Ao invés de criar uma solução com limitações que dificultam a 
implementação (como ter apenas um número constante de variáveis), 
podemos utilizar as propriedades da nossa abstração de nó para nos 
permitir armazenar tantos números quanto nos permita a memória do 
computador:

.Código para encontrar o maior elemento de  um conjunto de valores lidos da entrada padrão e a média dos divisores deste elemento
[source,c,numbered]
----
include::codigo/capitulo-01/maxemedia2.c[]
----

No código acima, se *n* números forem lidos, a função 
*makeNode* será invocada *n* vezes. Isto exige que *n* nós 
sejam criados (o que requer espaço de memória suficiente para 
armazenar o valor e o apontador para o próximo nó), portanto, o 
requisito de memória da solução é da ordem _O_(n). 

De forma similar, construímos uma *cadeia de nós* e iteramos ao 
longo de toda a cadeia, o que requer _O_(n) passos  para criar a 
cadeia e outros _O_(n) passos para iterar sobre ela.

Note que quando iteramos sobre os números na cadeia, estamos na 
verdade acessando-os em ordem inversa a da entrada. Por exemplo, 
assuma que os números na entrada do programa são 4, 7, 6, 30 e 15. 
Após encontrar o final da entrada,  a cadeia de nós terá a 
seguinte forma:

.Cadeia com n nós
image::imagens/capitulo-01/cadeia.png[scaledwidth="60%"]

Tais cadeias são mais comumente conhecidas como listas encadeadas. 
No entanto, nóss geralmente preferimos pensar nelas em termos de 
listas ou sequências, que são conceitos de mais alto nível: o 
conceito de encadeamento é apenas um  detalhe de implementação. 
Apesar de uma lista pode ser construída por encadeamentos, neste 
livro abordaremos várias outras formas para implementar uma lista. 
No momento, nos preocupamos mais com as possibilidades de 
utilização da  nossa estrutura de nó do que com uma das formas 
como ela pode ser utilizada.


.Criar uma cadeia sem inverter os valores da entrada
TIP: O algoritmo acima utiliza apenas as funções _makeNode_, 
_getValeu_ e _getNext_. Modifique o código apresentado utilizando a 
função _setNext_ para gerar uma cadeia que mantem a ordem original 
da entrada ao invés de inverte-la.

=== O Princípio da Indução

As cadeias que podemos construir a partir de um nós são 
demonstrações do princípio da indução matemática:

.Indução Matemática
****
1. Suponha que você tenha uma propriedade dos números naturais 
_P_(n)
2. Se você puder provar que quando _P_(n) é verdade _P_(n+1) 
também precisa ser verdade, então
3. Tudo que você precisa fazer para provar que _P_(n) é verdade 
para qualquer número natural _n_ é mostrar que _P_(1) é verdade.
****

Por exemplo, seja a propriedade _P_(n) a afirmação de que "é 
possível construir uma cadeia para armazenar _n_ números".  Esta é 
uma propriedade dos números naturais pois a sentença faz sentido 
para valores específicos de _n_:

* É possível construir uma cadeia para armazenar 5 números

* É possível construir uma cadeia para armazenar 100 números

* É possível construir uma cadeia para armazenar 1.000.000 de 
números

Ao invés de provar que podemos construir uma cadeia de comprimento 
5, 100 ou 1 milhão, podemos provar a afirmação geral _P_(n). Vamos 
ver como provar o passo 2 descrito acima, denominado *Hipótese 
Indutiva*:

* Assuma que _P_(n) é verdade, ou seja, que é possível construir 
uma cadeia com _n_ elementos. Agora precisamos
mostrar que _P_(n+1) também é verdade.
* Assuma que _chain_ é o primeiro nó de uma cadeia com _n_ 
elementos. Assuma que _i_ é algum número que nós gostaríamos de 
adicionar
à cadeia fazendo com que seu tamanho aumente para _n+1_.
* O código a seguir pode fazer isso para nós

[source,c]
----
Node *biggerChain = makeNode(i,chain);
----

* Agora _i_ é o valor do primeiro nó da cadeia denominada 
_biggerChain_. Se a cadeia _chain_ tinha _n_ elementos então 
_biggerChain_ precisa ter _n + 1_ elementos.

O passo 3 mais acima é denominado *Caso Base*. Vamos ver como 
podemos provar que _P_(1) é verdade.

* Precisamos mostrar que _P_(1) é verdade, ou seja, que podemos 
criar uma cadeia com um elemento.
* O código a seguir poder fazer isso para nós
[source,c]
----
Node *chain = makeNode(i, NULL);
----

O princípio da indução nos diz agora que provamos que é possível 
construir uma cadeia com _n_ elementos para qualquer valor de n ≥ 
1. Como isso é possível?  Provavelmente, a melhor forma de pensar 
sobre a indução é que ela é na verdade uma forma de criar uma 
fórmula que descreve um número infinito de provas. Depois que 
provamos que a afirmação é verdade para _P_(1), o caso base, 
podemos aplicar a hipótese indutiva para mostrar que _P_(2) é 
verdade. Sabendo que _P_(2) é verdade, podemos novamente aplicar a 
hipótese indutiva para mostrar que _P_(3) é verdade. O princípio 
nos diz que não há nada que nos impeça de continuar fazendo isso 
repetidamente, portanto, podemos assumir que _P_ é verdade para 
qualquer _n_ ≥ 1.

A indução pode parecer a primeira vista uma forma estranha de 
prova, mas é uma técnica extremamente útil. O que faz está 
técnica ser tão útil é que podemos pegar um problema que a 
princípio parecer ser bem difícil "provar que _P_(n) é verdade 
para qualquer n ≥ 1" e quebrá-lo em afirmações mais
simples e mais fáceis de provar. Tipicamente os casos base são 
fáceis de provar porque não são afirmações gerais. Portanto, a 
maior parte do trabalho se concentra em provar que a hipótese 
indutiva é válida, o que muitas vezes envolve reformular as 
afirmações de forma que elas possam ser utilizadas em uma prova de 
validade para _n + 1_.

Você pode pensar no valor contido em um nó como o caso base e no 
apontador para o próximo nó como a hipótese indutiva. Da mesma 
forma que na indução matemática, podemos quebrar o difícil 
problema de armazenar um número arbitrário de elementos em um 
problema muito mais simples, que é armazenar um único elemento é 
ter um mecanismo para adicionar novos elementos.

=== Recapitulando

Neste capítulo nós vimos a importância da utilização de 
estruturas de dados e conhecemos dois conceitos fundamentais para o 
desenvolvimento de software: *encapsulamento* e *abstração*.

Implementamos uma estrutura de dados rudimentar, chamada nó, e a 
utilizamos para construir cadeias para armazenar uma quantidade 
arbitrária de elementos. Essa estrutura rudimentar será a base para 
todas as estruturas de dados que abordaremos ao longo deste livro.

Finalmente, vimos como o princípio da *indução matemática* 
está associado à concepção de estruturas em cadeia. 

No próximo capítulos estudaremos o conceito de *notação 
assintótica*, o que nos permitirá estimar a quantidade de tempo 
necessária para a execução de um algoritmo e a quantidade de 
memória necessária para armazenar uma determinada estrutura de 
dados.


// Sempre terminar o arquivo com uma nova linha.

