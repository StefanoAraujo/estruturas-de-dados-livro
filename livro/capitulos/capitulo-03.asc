== Arranjos

=== Introdução

.Objetivos do capítulo
****
Ao final deste capítulo você deverá ser capaz de:

* Entender o conceito e funcionamento de um arranjo
* Implementar funções utilizando arranjos unidimensionais e multi-dimensionais em uma linguagem de programação
****

Um arranjo (do inglês _array_) e uma estrutura de dados linear utilizada principalmente para armazenar dados similares. É um método particular para armazenar elementos de um conjunto de dados _indexável_. Os elementos são armazenados sequencialmente em blocos dentro do arranjo. Cada elemento é referenciado através de um índice.

O índice é normalmente um número utilizado para endereçar um elemento do arranjo. Por exemplo, se desejamos armazenar informações sobre cada um dos dias do mês de Agosto, precisaríamos criar um arranjo capaz de armazenar 31 valores, um para cada dia do mês. As regras de indexação dependem da linguagem de programação utilizada, porém, a maioria das linguagens utiliza 0 ou 1 como índice par ao primeiro elemento do arranjo.

O conceito de arranjo pode parecer desafiador para leitores com pouco experiência em programação mas é, na verdade, algo bastante simples. Pense em um caderno com páginas numeradas de 1 até 12. Cada página pode conter ou não dados. O caderno é um arranjo de páginas. Cada página é um _elemento_ do arranjo de páginas denominado _caderno_. Podemos extrair informações de forma programática de uma página nos referindo a ela através de seu índice (caderno[4] é uma referência ao conteúdo da quarta página do arranjo _caderno_.).

.Um caderno (_arranjo_) com 12 páginas (_elementos_)
image::imagens/capitulo-03/arranjo-unidimensional.png[scaledwidth="60%"]

Arranjos podem ser também multi-dimensionais - ao invés de acessar oelementos de uma lista unidimensional, os elementos são acessados através de dois ou mais índices, de forma semelhante a uma matriz.

Arranjos multi-dimensionais são tão simples quanto o arranjo do nosso exemplo anterior. Para visualizar um arranjo multi-dimensional imagine um calendário. Cada página do calendário, com índices variando de 1 a 12, representam um mês, cada um contendo aproximadamente 30 elementos, que representam os dias. Cada dia pode possuir informação associadas a ele. Portanto, de forma programática, _Calendário[4][15]_ seria uma referência ao 15^o^ dia do 4^o^mês. Portanto, teríamos um arranjo bi-dimensional.  Para visualizar um arranjo tridimensional basta quebrar cada dia em 24 horas. Agora, teríamos algo como _Calendario[4][15][9]_ para nos referir a 9^a^ hora do 15^o^ dia do 4^o^ mês.

.Um arranjo bi-dimensional de 6 elementos por 4
image::imagens/capitulo-03/arranjo-bidimensional.png[scaledwidth="60%"]

A seguir definimos as três operações básicas para manipulação de arranjos unidimensionais.

.Definição das operações básicas para manipulação de arranjos unidimensionais
[source,c,numbered]
----
//Cria um arranjo de n elementos indexados de 0 a n - 1, inclusive. 
Element * makeArray(int n);

//Retorna o valor do elemento de índice index.
//O valor de index precisar estar no intervalo 0 <= index <= (n - 1)
Element getValueAt(Element *, int index);


//Altera o valor do elemento de índice index no arranjo para o valor newValue.
void setValueAt(Element *, int index, Element newValue);
----

Arranjos garantem tempo _constante_ para acessos de leitura e escrita, _O(1)_, no entanto, várias operações de consulta (encontrar o menor valor, encontrar o maior valor, encontrar o índice de um determinado elemento, etc) possuem complexidade linear , _O(n)_. 


A implementação de arranjos é bastante eficiente na maioria das linguagem de programação uma vez que suas operações computam o endereço de cada elemento do arranjo através de uma função simples baseada no _endereço base_ do arranjo.

WARNING: Na maioria das linguagens de programação, um arranjo é definido por um _endereço base_ e um limite. Tentativas de acesso a elementos em posições fora do intervalo [base, base + limite] geralmente resultam em exceções na execução de um programa.

A implementação de arranjos difere bastante de uma linguagem de programação para outra. Algumas linguagens permitem que um arranjo seja redimensionado automaticamente ou que contenham elementos de diferentes tipos (como em Perl). Outra linguagens são mais estritas e exigem que o tipo e tamanho do arranjo sejam conhecidos em tempo de execução (como em C).

Arranjos são geralmente mapeados diretamente para espaços contíguos de memória e são, portanto, a estrutura de armazenamento "mais natural" na maioria das linguagens de programação de alto nível.

Arranjos lineares simples são a base para grande parte das demais estruturas de dados. Várias linguagens de programação, inclusive, não permitem que o programador aloque memória para qualquer outra estrutura além dos arranjos. Isso é uma forma a garantir que todas as demais estruturas de dados sejam implementados utilizando arranjos como base. A exceção seriam as listas encadeadas, que podem ser implementados utilizados objetos alocados individualmente. Porém, também é possível implementar uma lista encadeada utilizando um arranjo.

==== Tipos e Limites

Os índices de um arranjo precisam ser de um mesmo tipo. Geralmente é utilizado o tipo inteiro padrão da linguagem mas existem linguagens como _Ada_ e _Pascal_ que permitem a utilização de qualquer tipo discreto como índice de um arranjo. Linguagens de _script_, como _Python_, permitem que qualquer tipo possa ser utilizado como índice para um arranjo (_arranjos associativos_).

Cada arranjo possui um limite inferior e superior para seus índices. Algumas linguagens de programação fixam o valor do limite inferior em _0_ (_C, C++, C#, Java_) ou 1 (_FORTRAN 66_). Outras linguagens (_Ada, PL/I, Pascal_) permitem que o limite inferior sejam livremente definido, inclusive com valores negativos.

O terceiro aspecto relacionado ao acesso a arranjos é a checagem de validade do índice e a definição do que acontecem quando um índice inválido é fornecido. Este é um ponto muito importante pois software malicioso como _vírus_ e _vermes_  geralmente se aproveitam de falhas de checagem nos limites e arranjos para contaminar programas legítimos.

Existem três opções mais comuns para checagem de limites em arranjos:

1. A maioria das linguagens (_Ada, PL/I, Pascal, Java, C#_) checa os limites do arranjo e lança uma exceção quando se tenta acessar um elemento fora do arranjo.

2.  Algumas poucas linguagens (_C, C++_) não checam por acessos fora dos limites do arranjo e simplesmente retornam algum valor arbitrário quando um elemento inválido é acessado.

3. Linguagens de _script_ geralmente expandem automaticamente o tamanho do arranjo quando dados fora do limite inicial do arranjo são acessados.

==== Declarando Arranjos
A declaração de um arranjo difere bastante de uma linguagem de programação para outra e é afetada diretamente pelas funcionalidades fornecidas por cada uma delas.

A forma de declaração mais simples ocorre quando a linguagem define um valor mínimo e tipo fixo para os índices. Se você precisa um arranjo para armazenar seus rendimentos mensais você poderia declará-lo em linguagem _C_ da seguinte forma:

.Declaração de um arranjo unidimensional em linguagem _C_
[source,c]
----
typedef double Income[12];
----

Esta declaração define um novo tipo denominado _Income_ que representa um arranjo de números em ponto flutuante com os índices dos elementos variando de _0_ a _11_. 

TIP: Recomendamos a leitura de XX para uma descrição completa da sintaxe para definição de arranjos em linguagem _C_.

Algumas linguagens permitem que se especifique o valor mínimo e máximo e o tipo do índice . A declaração nesse caso se torna um pouco mais complexa. A seguir apresentamos um exemplo de declaração de arranjos na linguagem _Ada_:

.Declaração de um arranjo em linguagem _Ada_
[source,ada]
----
type Month is range 1 .. 12;
type Income is array(Month) of Float;
----

TIP: Recomendamos a leitura de YY para uma descrição completa da sintaxe para definição de arranjos em linguagem _Ada_.

==== Exercícios

1. Forneça uma implementação com complexidade _O(1)_ para as três operações básicas para manipulação de arranjos unidimensionais definidas neste capítulo: _makeArray_, _getValueAt_, _setValueAt_.

2. Assuma que estas funções são a única forma de acesso aos elementos de um arranjo. Como estas funções poderiam ser utilizadas para manipular elementos em um arranjo bi_dimensional?

3. Novamente assumindo que estas funções são a única forma de acesso aos elementos de um arranjo, forneça implementações com complexidade _O(n)_ para as seguintes funções:

a. Encontrar o menor elemento de um arranjo unidimensional

b. Encontrar o maior elemento de um arranjo bi-dimensional

c. Encontrar o índice de um elemento de arranjo unidimensional (-1 se o elemento não for encontrado).


=== Recaptulando

Arranjos são em muitas linguagens de programação a estrutura de dados base para a construção de outras estruturas.

Neste capítulos aprendemos um pouco sobre o funcionamento destas estruturas e tivemos a oportunidade de praticar a implementação de código utilizando arranjos unidimensionais e multi-dimensionais.

No próximo capítulo começaremos a estudar uma família de estruturas de dados bastante semelhantes às estruturas que já estudamos (cadeia no capítulo 1 e arranjo no capítulo 3) mas que oferecem um nova gama de funcionalidades e oportunidades: as estruturas de lista.


// Sempre terminar o arquivo com uma nova linha.


