== Arranjos

:cap: capitulo-03
:online: {gitrepo}/blob/master/livro/capitulos/code/{cap}
:local: {code_dir}/{cap}
:img: {image_dir}/{cap}

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Entender o conceito e funcionamento de um arranjo
* Implementar funções utilizando arranjos unidimensionais e 
multi-dimensionais em uma linguagem de programação
____


=== Introdução

(((Arranjo))) (((Array)))

Um arranjo (do inglês _array_) é uma estrutura de dados linear 
utilizada principalmente para armazenar dados similares. É um 
método particular para armazenar elementos de um conjunto de dados 
_indexável_. Os elementos são armazenados sequencialmente em blocos 
dentro do arranjo. Cada elemento é referenciado através de um 
índice.

O índice, normalmente um número, é utilizado para endereçar um 
elemento do arranjo. Por exemplo, se desejamos armazenar 
informações sobre cada um dos dias do mês de Agosto, 
precisaríamos criar um arranjo capaz de armazenar 31 valores, um 
para cada dia do mês. As regras de indexação dependem da linguagem 
de programação utilizada, porém, a maioria das linguagens utiliza 
0 ou 1 como índice para o primeiro elemento do arranjo.

O conceito de arranjo pode parecer desafiador para leitores com pouca 
experiência em programação mas é, na verdade, algo bastante 
simples. Pense em um caderno com páginas numeradas de 1 até 12. 
Cada página pode conter ou não dados. O caderno é um arranjo de 
páginas. Cada página é um _elemento_ do arranjo de páginas 
denominado `caderno`. Podemos extrair informações de forma 
programática de uma página nos referindo a ela através de seu 
índice (`caderno[4]` é uma referência ao conteúdo da quarta página 
do arranjo `caderno`.).

.Um caderno (_arranjo_) com 12 páginas (_elementos_)
image::{img}/arranjo-unidimensional.eps[scaledwidth="60%"]

Arranjos podem ser também multi-dimensionais -- ao invés de acessar 
elementos de uma lista unidimensional, os elementos são acessados 
através de dois ou mais índices, de forma semelhante a uma matriz.

Arranjos multi-dimensionais são tão simples quanto o arranjo do 
nosso exemplo anterior. Para visualizar um arranjo multi-dimensional 
imagine um calendário. Cada página do calendário, com índices 
variando de 1 a 12, representa um mês. Cada mês contém 
aproximadamente 30 dias, que são seus elementos. Cada dia pode 
possuir informações associadas a ele: se é feriado, a lua etc. Portanto, de forma 
programática, `Calendario[4][15]` seria uma referência ao 15º 
dia do 4º mês. Portanto, teríamos um arranjo bi-dimensional.  Para 
visualizar um arranjo tridimensional basta quebrar cada dia em 24 
horas, como uma Agenda de Compromissos. Desta forma, teríamos algo como
`Agenda[4][15][9]` para nos referir a 9ª hora do 15º dia do 4º mês.

.Arranjos bi-dimensional (Calendario) e tri-dimensional (Agenda)
image::{img}/calendario.eps[scaledwidth="60%"]

=== Operações de manipulação em arranjos unidimensionais

(((Arranjo, Operações básicas)))

No código a seguir apresentamo as três operações básicas para manipulação 
de arranjos unidimensionais.

.Código fonte
{online}/array.h[{local}/array.h]

.Definição das operações básicas para manipulação de arranjos unidimensionais
[source,c,numbered]
----
include::{local}/array.h[]
----

Arranjos garantem tempo _constante_ para acessos de leitura e escrita:
_O(1)_. Várias operações de consulta nos arranjos possuem complexidade
linear, _O(n)_, tais como encontrar o menor valor, encontrar o maior
valor, encontrar o índice de um determinado elemento, etc.

A implementação de arranjos é bastante eficiente na maioria das 
linguagem de programação uma vez que suas operações computam o 
endereço de cada elemento do arranjo através de uma função 
simples baseada no _endereço base_ do arranjo.


////
Os alunos não viram exceções nas linguagens de programação, apenas
exceções de processadores. Não acho que eles entenderiam esta
mensagem. De toda forma, já existe uma seção abaixo falando
sobre isso.

WARNING: Na maioria das linguagens de programação, um arranjo é 
definido por um _endereço base_ e um limite. Tentativas de acesso a 
elementos em posições fora do intervalo [base, base + limite] 
geralmente resultam em exceções na execução de um programa.
////

A implementação de arranjos difere bastante de uma linguagem de 
programação para outra. Algumas linguagens permitem que um arranjo 
seja redimensionado automaticamente ou que contenha elementos de 
diferentes tipos (como em Perl). Outra linguagens são mais estritas 
e exigem que o tipo e tamanho do arranjo sejam conhecidos em tempo de 
compilação (como em C).

Arranjos são geralmente mapeados diretamente para espaços 
contíguos de memória e são, portanto, a estrutura de armazenamento 
"mais natural" na maioria das linguagens de programação de alto 
nível.

Arranjos lineares simples são a base para grande parte das demais 
estruturas de dados. De tal forma que várias linguagens de programação 
não permitem que o programador aloque memória para qualquer outra 
estrutura além dos arranjos. Isso é uma forma de garantir que todas 
as demais estruturas de dados sejam implementados utilizando arranjos 
como base.footnote:[A exceção seriam as listas encadeadas, que podem ser 
implementados utilizados objetos alocados individualmente. Porém, 
também é possível implementar uma lista encadeada utilizando um 
arranjo.]

==== Tipos e Limites

Os índices de um arranjo precisam ser de um mesmo tipo. Geralmente 
é utilizado o tipo inteiro padrão da linguagem, mas existem 
linguagens como _Ada_ e _Pascal_ que permitem a utilização de 
qualquer tipo discreto como índice de um arranjo. Linguagens de 
_script_, como _Python_, permitem que qualquer tipo possa ser 
utilizado como índice para um arranjo (_arranjos associativos_).

Cada arranjo possui um limite *inferior* e *superior* para os seus índices. 
Algumas linguagens de programação fixam o valor do limite inferior 
em _0_ (_C, C++, C#, Java_) ou 1 (_FORTRAN 66_). Outras linguagens 
(_Ada, PL/I, Pascal_) permitem que o limite inferior seja livremente 
definido, inclusive com valores negativos.

O terceiro aspecto relacionado ao acesso a arranjos é a *checagem de 
validade do índice* e a definição do que acontece quando um índice 
inválido é fornecido. Este é um ponto muito importante pois 
softwares maliciosos como _vírus_ e _vermes_  geralmente se aproveitam 
de falhas de checagem nos limites de arranjos para contaminar 
programas legítimos.

Existem três opções mais comuns para checagem de limites em 
arranjos:

1. A maioria das linguagens (_Ada, PL/I, Pascal, Java, C#_) checa os 
limites do arranjo e lança uma exceção quando se tenta acessar um 
elemento fora do arranjo.

2.  Algumas poucas linguagens (_C, C++_) não checam por acessos fora 
dos limites do arranjo e simplesmente retornam algum valor 
arbitrário quando um elemento inválido é acessado.

3. Linguagens de _script_ geralmente expandem automaticamente o 
tamanho do arranjo quando dados fora do limite inicial do arranjo 
são acessados.

==== Declarando Arranjos

(((Aranjo, Declaração)))

A declaração de um arranjo difere bastante de uma linguagem de 
programação para outra e é afetada diretamente pelas 
funcionalidades fornecidas por cada uma delas.

A forma de declaração mais simples ocorre quando a linguagem define 
um valor mínimo e tipo fixo para os índices. Se você precisa de um 
arranjo para armazenar seus rendimentos mensais você poderia 
declará-lo em linguagem _C_ da seguinte forma:

.Declaração de um arranjo unidimensional na linguagem _C_
[source,c]
----
typedef double Rendimento[12];
----

Esta declaração define um novo tipo denominado _Rendimento_ que 
representa um arranjo de números em ponto flutuante com os índices 
dos elementos variando de `0` a `11`.footnote:[Este tipo poderia
armazenar os rendimentos de uma pessoa durante um ano.] 

Algumas linguagens permitem que se especifique o valor mínimo e 
máximo e o tipo do índice. A declaração nesse caso se torna um 
pouco mais complexa. A seguir apresentamos um exemplo de declaração 
de arranjos na linguagem _Ada_:

.Declaração de um arranjo em linguagem _Ada_
[source,ada]
----
type Mes is range 1 .. 12;
type Rendimento is array(Mes) of Float;
----

==== Exercícios

1. Forneça uma implementação com complexidade _O(1)_ para as três 
operações básicas para manipulação de arranjos unidimensionais 
definidas neste capítulo: `makeArray`, `getValueAt` e `setValueAt`.
+
[TIP]
====
Para auxiliá-lo na resolução deste exercício preparamos uma proposta
de solução que você *pode* adotar, utilizando os seguintes arquivos: 

* {online}/array.h[{local}/array.h]
* {online}/operacoes_basicas_setembro1999.c[{local}/operacoes_basicas_setembro1999.c]

Nesta proposta você necessita fornecer a implementação das funções
indicadas. A proposta possui testes (`assert`) que podem serem
utilizados para verificar sua solução.

Lembre-se que a seção <<sec_codigo_fonte>> explica como baixar e 
acessar os códigos fonte do livro.

====


2. Assuma que estas funções são a única forma de acesso aos 
elementos de um arranjo. Como estas funções poderiam ser utilizadas 
para manipular elementos em um arranjo bi-dimensional?
+
[TIP]
====
Para auxiliá-lo na resolução deste exercício preparamos uma proposta
de solução que você *pode* adotar, utilizando os seguintes arquivos: 

* {online}/array.h[{local}/array.h]
* {online}/operacoes_basicas_setembro1999_bidimencional.c[{local}/operacoes_basicas_setembro1999_bidimencional.c]

Nesta proposta você deve fornecer o corpo da implementação das funções
de acesso bidimencional.

====

3. Novamente assumindo que estas funções são a única forma de 
acesso aos elementos de um arranjo, forneça implementações com 
complexidade _O(n)_ para as seguintes funções:

a. Encontrar o menor elemento de um arranjo unidimensional

b. Encontrar o maior elemento de um arranjo bi-dimensional

c. Encontrar o índice de um elemento de arranjo unidimensional 
(retornando `-1` se o elemento não for encontrado).

[TIP]
====
Para auxiliá-lo na resolução deste exercício preparamos uma proposta
de solução que você *pode* adotar, utilizando os seguintes arquivos: 

* {online}/array.h[{local}/array.h]
* {online}/operacoes_de_consulta.c[{local}/operacoes_de_consulta.c]

Nesta proposta você deve utilizar a propriedade `temperatura` para
realização das consultas. Então, o ``menor elemento'' significa o 
``dia com a menor temperatura''.

====


=== Recapitulando

Arranjos são, em muitas linguagens de programação, a estrutura de 
dados base para a construção de outras estruturas.

Neste capítulos aprendemos um pouco sobre o funcionamento destas 
estruturas e tivemos a oportunidade de praticar a implementação de 
código utilizando arranjos unidimensionais e multi-dimensionais.

No próximo capítulo começaremos a estudar uma família de 
estruturas de dados bastante semelhantes às estruturas que já 
estudamos (cadeia no capítulo 1 e arranjo no capítulo 3) mas que 
oferecem um nova gama de funcionalidades e oportunidades: as 
estruturas de lista.


// Sempre terminar o arquivo com uma nova linha.


