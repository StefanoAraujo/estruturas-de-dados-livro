== Estruturas de Lista e Iteradores

=== Introdução

.Objetivos do capítulo
****
Ao final deste capítulo você deverá ser capaz de:

* objetivo 1
* objetivo 2
* objetivo N
****

Vimos até este momento duas estruturas de dados diferentes que permitem armazenar uma sequência ordenada de elementos. No entanto, tais estruturas apresentam _interfaces_ distintas. A estrutura de arranjo utiliza as funções _setElement()_ e _getElement()_ para acessar e alterar elementos. Já a cadeia de nós requer a utilização da função _getNext()_ até que o nó desejado seja encontrado e, neste momento, a utilização das funções _getValue()_ e _setValue()_ para acessar ou modificar seu valor. 

Imagine agora que você escreveu um código utilizando uma dessas estruturas e de repente chegou a conclusão que precisaria na verdade utilizar a outra. Você precisará percorrer todo o código já escrito e alterar as funções de acesso à estrutura de dados. Isso, dependendo do tamanho do programa, pode ser uma operação bastante custosa. 

Felizmente, existe uma forma de concentrar essas alterações em um único local: utilizando tipos abstrato de dados. Iniciamos então apresentando dois novos _TADs_: uma _lista_ e um _iterador_. A seguir encontramos a definição desses novos tipos abstratos de dados.


.Definição do tipo abstrato de dados _List_
[source,c,numbered]
----
include::codigo/capitulo-04/list.h[]
----

Um _iterador_ é uma outra abstração que encapsula tanto o acesso a um único elemento quanto a movimentação ao longo da lista. Sua interface é bastante similar a interface da estrutura de _Nó_ apresentada na introdução, mas como ele é um tipo abstrato, diferentes tipos de listas podem fornecer implementações diferentes.

.Definição do tipo abstrato de dados _Iterator_
[source,c,numbered]
----
include::codigo/capitulo-04/iterator.h[]
----

// NOTE: No começo do código apresentado acima temos a inclusão de arquivos denominados _list_typedef.h_ e _list_iterator_typedef.h_. Estes arquivos são utilizados para definir os tipos _List_, _Iterator_ e _Element_. Por hora vamos focar nosso interesse na definição das operações básicas mas voltaremos a esta definição mais tarde.


Há vários outros aspectos na definição do tipo abstrato de dados _List_ que requerem maior detalhamento. Inicialmente, note que a operação _getEnd()_ retorna um iterador que "aponta para o elemento após o último elemento" da lista. Este requisito complica um pouco a implementação mas permite que se forneçam implementações como a que se segue:


.Uma implementação para a operação _getEnd()_
[source,c,numbered]
----
/**
 *	Retorna um iterador que aponta para o elemento após o último elemento da lisa. 
 *	Tem complexidade O(n).
 */
Iterator getEnd(List list) {
	Iterator it = getBegin(list);
	while(it != NULL) {
		moveNext(it);
	}
	return it;
}
----

Em segundo lugar, cada operação apresenta sua complexidade no pior caso. Qualquer implementação do tipo abstrato _List_ deve garantir ser capaz de implementar estas operações pelo menos tão rápido quanto o especificado na interface. Porém, a maioria das implementações será bem mais eficiente que o especificado. Por exemplo, em uma implementação de lista utilizando a cadeia de nós a operação _insertAfter()_ terá complexidade _O(1)_.

Finalmente, algumas operações especificam que possuem uma implementação _default_. Isso significa que elas podem ser implementadas em termos de outras operações mais primitivas. Elas são incluídas no tipo abstrato de dados de forma que certas implementações possam fornecer versões mais eficientes. Por exemplo, a implementação _default_ da operação _getNth()_ tem complexidade _O(n)_ porque ela precisa percorrer todos os elementos da lista até alcançar o _enésimo_. Porém, em uma implementação de lista baseada em arranjos, essa operação tem complexidade _O(1)_ utilizando a operação _getElement()_. A seguir são apresentas as implementações _default_ para as operações  _isEmpty()_, _getSize()_, _getNth()_ e _setNth()_.

.Implementações _default_ para as operações _isEmpty()_, _getSize()_, _getNth()_ e _setNth()_ do tipo abstrato de dados _List_
[source,c,numbered]
----
include::codigo/capitulo-04/list_default.c[]
----

== Implementações

Para podermos utilizar o tipo abstrato _List_ é preciso fornecer uma implementação concreta de sua interface. Existem duas estruturas de dados que naturalmente implementam o tipo abstrato _List_: a cadeia de nós apresentada no capítulo 1, comumente denominada _Lista Encadeada_, e uma extensão dos arranjos apresentados no capítulo 2, denominado _Vector_, que possui a capacidade de se redimensionar para acomodar mais elementos.

Nesta seção apresentaremos várias implementações concretas para o tipo abstrato de dados _List_. 

=== Lista Encadeada

O código a seguir apresenta a definição do tipo abstrato de dados _LinkedList_. A definição da lista é baseada na estrutura básica de _Nó_ que apresentamos no Capítulo 1. A definição de _LinkedList_ apresenta uma operação adicional, _createLinkedList()_, utilizada para criar uma nova lista. 

Inicialmente a lista esta vazia, portanto, a criação consiste simplesmente em criar um _Nó_ para representar a cabeça da lista e atribuir o valor _NULL_ a este nó.

Nesta implementação de lista, o iterador "um após o final da lista" é simplesmente um nó com valor _NULL_. Para entender o motivo, pense no que aconteceria se você tivesse um iterador para o último elemento da lista e invocasse a operação _moveNext()_.

A seguir apresentamos o código com todas as de uma _LinkedList_.

.Implementação das operações de uma _LinkedList_
[source,c,numbered]
----
include::codigo/capitulo-04/linkedlist.c[]
----

NOTE: Observem a presença do prefixo _LL_ em alguns tipos de dados, particularmente, no _LL_Iterator_. Isso é necessário para evitar conflitos com outras implementações de iteradores que apresentaremos ao longo do curso.

Observemos agora o funcionamento das duas operações que inserem elementos na lista. A primeira delas, a operação _prepend()_, insere um novo item no começo da lista. A implementação apresentada realiza essa operação fazendo o apontador de próximo do novo item apontar para a cabeça da lista e fazendo a cabeça da lista ser o novo item inserido.
A figura a seguir ilustra a alteração efetuada em uma lista encadeada após a execução da operação _prepend()_.

.Inserção de um item no ínicio da lista
image::imagens/capitulo-04/prepend.png[scaledwidth="60%"]

A segunda operação para inserção de elementos na lista, _insertAfter()_, insere um novo item após o item apontado por um iterador. A figura abaixo ilustra o funcionamento deste tipo de inserção.

.Inserção de um item após o item apontado pelo Iterador
image::imagens/capitulo-04/insertAfter.png[scaledwidth="60%"]


As operações de remoção _removeFirst_ e _removeAfter_ funcionam de maneira análoga. No caso da operação _removeFirst_, o apontador de cabeça da lista é alterado para apontar para o próximo elemento da lista, fazendo com que não haja mais qualquer referência para o antigo primeiro elemento. Após essa alteração, observada na linha 54 do código fonte anterior, é preciso liberar a memória alocada previamente para armazenar o item. Isso é feito utilizando a função _free()_.

WARNING: Não liberar memória utilizada para armazenar dados não mais utilizados é um erro comum e que pode levar a um vazamento de memória (_memory leak_). Isso pode levar a uma falha na execução por programa por esgotamento da memória livre disponível. Algumas linguagem de programação, como _Java_ por exemplo, implementam um mecanismo automático para liberação de memória sempre que um objeto passa a não ser mais referenciado. Esse mecanismo é conhecido como coletor de lixo ou _garbage collector_.


No caso da operação _removeFirst_ a operação alterar o apontador de próximo do item referenciado pelo iterador para que aponte para um elemento mais adiante (_it->next = it->next->next_).

Em nossa implementação de _LinkedList_ o iterador nada mais é do que um apontador para uma estrutura de _Nó_. A implementação de suas operações faz uso das propriedades da estrutura básica que introduzimos no capítulo 1, conforme a listagem de código abaixo.

.Implementação de um iterador para uma _LinkedList_
[source,c,numbered]
----
include::codigo/capitulo-04/listiterator.c[]
----

NOTE: A operação _equal()_ faz uma comparação de apontadores para saber se dois iteradores são iguais. Isso significa comparar os endereços de memória das localidades referenciadas pelos dois iteradores.

Voltemos agora para o exemplo que vimos no capítulo 1 sobre como encontrar o maior elemento de um conjunto de valores lidos da entrada padrão e a média dos divisores deste elemento. Vamos alterar a nossa implementação anterior para utilizar a nossa nova estrutura de dados _LinkedList_.

.Utilizando uma _LinkedList_ para encontrar o maior elemento de um conjunto de valores e a média dos divisores deste elemento
[source,c,numbered]
----
include::codigo/capitulo-04/maxemedia3.c[]
----

==== Exercícios

1. Escreva um programa que recebe um conjunto de números inteiros de tamanho desconhecido da entrada padrão e imprime os números lidos na ordem inversa da leitura.
2. Implemente uma função que receba como parâmetro uma lista encadeada e um valor inteiro n e divida a lista em duas, de tal forma que a segunda lista comece no primeiro nó logo após a primeira ocorrência de n na lista original.
3. Implemente uma função que recebe duas listas encadeada l1 e l2 como parâmetros e retorna uma terceira lista l3 obtida pela concatenação de l2 ao final de l1.
4. Implemente uma função que, dados uma lista encadeada e um inteiro não negativo n, remova da lista seus n primeiros nós e retorne a lista resultante. Caso n seja maior que o comprimento da lista, todos os seus elementos devem ser removidos e o resultado da função deve ser uma lista vazia.
5. Escreva um programa que recebe um conjunto de números inteiros de tamanho desconhecido da entrada padrão e imprime os números lidos em ordem crescente.
6. Modifique a estrutura _LinkedList_ apresentada para que ela se comporte como uma lista circular, ou seja, o último elemento da lista deve ter um apontador para o primeiro elemento.

=== Vetor

Uma vetor é uma estrutura de lista que utiliza, ao invés de uma estrutura encadeada como vimos anteriormente, um arranjo para armazenar seus elementos.

Antes de apresentarmos a implementação de um vetor, vejamos primeiro como funciona o seu iterador. Isso deixará a implementação do vetor adiante mais clara. 




=== Lista Bidirecional

blah blah blah

==== Lista Duplamente Encadeada

blah blah blah

=== Eficiência

blah blah blah

=== Recaptulando

blah blah blah


// Sempre terminar o arquivo com uma nova linha.


