== Estruturas de Lista e Iteradores

:cap: capitulo-04
:online: {gitrepo}/blob/master/livro/capitulos/code/{cap}
:local: {code_dir}/{cap}
:img: {image_dir}/{cap}

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Compreender o conceito de lista encadeada
* Conhecer diferentes variações e implementações de listas encadeadas
* Ser capaz de escolher entre estas variações a mais adequada para resolver determinados tipos de problemas.
____

Vimos até este momento duas estruturas de dados diferentes que permitem armazenar uma sequência ordenada de elementos. No entanto, tais estruturas apresentam _interfaces_ distintas. A estrutura de arranjo utiliza as funções _setElement()_ e _getElement()_ para acessar e alterar elementos. Já a cadeia de nós requer a utilização da função _getNext()_ até que o nó desejado seja encontrado e, neste momento, a utilização das funções _getValue()_ e _setValue()_ para acessar ou modificar seu valor. 

Imagine agora que você escreveu um código utilizando uma dessas estruturas e de repente chegou a conclusão que precisaria na verdade utilizar a outra. Você precisará percorrer todo o código já escrito e alterar as funções de acesso à estrutura de dados. Isso, dependendo do tamanho do programa, pode ser uma operação bastante custosa. 

Felizmente, existe uma forma de concentrar essas alterações em um único local: utilizando tipos abstrato de dados. Iniciamos então apresentando dois novos _TADs_: uma _lista_ e um _iterador_. A seguir encontramos a definição desses novos tipos abstratos de dados.


.Definição do tipo abstrato de dados _List_
[source,c,numbered]
----
include::{local}/list.h[]
----

Um _iterador_ é uma outra abstração que encapsula tanto o acesso a um único elemento quanto a movimentação ao longo da lista. Sua interface é bastante similar a interface da estrutura de _Nó_ apresentada na introdução, mas como ele é um tipo abstrato, diferentes tipos de listas podem fornecer implementações diferentes.

.Definição do tipo abstrato de dados _Iterator_
[source,c,numbered]
----
include::{local}/iterator.h[]
----

// NOTE: No começo do código apresentado acima temos a inclusão de arquivos denominados _list_typedef.h_ e _list_iterator_typedef.h_. Estes arquivos são utilizados para definir os tipos _List_, _Iterator_ e _Element_. Por hora vamos focar nosso interesse na definição das operações básicas mas voltaremos a esta definição mais tarde.


Há vários outros aspectos na definição do tipo abstrato de dados _List_ que requerem maior detalhamento. Inicialmente, note que a operação _getEnd()_ retorna um iterador que "aponta para o elemento após o último elemento" da lista. Este requisito complica um pouco a implementação mas permite que se forneçam implementações como a que se segue:


.Uma implementação para a operação _getEnd()_
[source,c,numbered]
----
/**
 *	Retorna um iterador que aponta para o elemento após o último elemento da lisa. 
 *	Tem complexidade O(n).
 */
Iterator getEnd(List list) {
	Iterator it = getBegin(list);
	while(it != NULL) {
		moveNext(it);
	}
	return it;
}
----

Em segundo lugar, cada operação apresenta sua complexidade no pior caso. Qualquer implementação do tipo abstrato _List_ deve garantir ser capaz de implementar estas operações pelo menos tão rápido quanto o especificado na interface. Porém, a maioria das implementações será bem mais eficiente que o especificado. Por exemplo, em uma implementação de lista utilizando a cadeia de nós a operação _insertAfter()_ terá complexidade _O(1)_.

Finalmente, algumas operações especificam que possuem uma implementação _default_. Isso significa que elas podem ser implementadas em termos de outras operações mais primitivas. Elas são incluídas no tipo abstrato de dados de forma que certas implementações possam fornecer versões mais eficientes. Por exemplo, a implementação _default_ da operação _getNth()_ tem complexidade _O(n)_ porque ela precisa percorrer todos os elementos da lista até alcançar o _enésimo_. Porém, em uma implementação de lista baseada em arranjos, essa operação tem complexidade _O(1)_ utilizando a operação _getElement()_. A seguir são apresentas as implementações _default_ para as operações  _isEmpty()_, _getSize()_, _getNth()_ e _setNth()_.

.Implementações _default_ para as operações _isEmpty()_, _getSize()_, _getNth()_ e _setNth()_ do tipo abstrato de dados _List_
[source,c,numbered]
----
include::{local}/list_default.c[]
----

=== Implementações

Para podermos utilizar o tipo abstrato _List_ é preciso fornecer uma implementação concreta de sua interface. Existem duas estruturas de dados que naturalmente implementam o tipo abstrato _List_: a cadeia de nós apresentada no capítulo 1, comumente denominada _Lista Encadeada_, e uma extensão dos arranjos apresentados no capítulo 2, denominado _Vector_, que possui a capacidade de se redimensionar para acomodar mais elementos.

Nesta seção apresentaremos várias implementações concretas para o tipo abstrato de dados _List_. 

==== Lista Encadeada

O código a seguir apresenta a definição do tipo abstrato de dados _LinkedList_. A definição da lista é baseada na estrutura básica de _Nó_ que apresentamos no Capítulo 1. A definição de _LinkedList_ apresenta uma operação adicional, _createLinkedList()_, utilizada para criar uma nova lista. 

Inicialmente a lista esta vazia, portanto, a criação consiste simplesmente em criar um _Nó_ para representar a cabeça da lista e atribuir o valor _NULL_ a este nó.

Nesta implementação de lista, o iterador "um após o final da lista" é simplesmente um nó com valor _NULL_. Para entender o motivo, pense no que aconteceria se você tivesse um iterador para o último elemento da lista e invocasse a operação _moveNext()_.

A seguir apresentamos o código com todas as operações de uma _LinkedList_.

.Implementação das operações de uma _LinkedList_
[source,c,numbered]
----
include::{local}/linkedlist.c[]
----

NOTE: Observem a presença do prefixo _LL_ em alguns tipos de dados, particularmente, no _LL_Iterator_. Isso é necessário para evitar conflitos com outras implementações de iteradores que apresentaremos ao longo do curso.

Observemos agora o funcionamento das duas operações que inserem elementos na lista. A primeira delas, a operação _prepend()_, insere um novo item no começo da lista. A implementação apresentada realiza essa operação fazendo o apontador de próximo do novo item apontar para a cabeça da lista e fazendo a cabeça da lista ser o novo item inserido.
A figura a seguir ilustra a alteração efetuada em uma lista encadeada após a execução da operação _prepend()_.

.Inserção de um item no ínicio da lista
image::{img}/prepend.png[scaledwidth="60%"]

A segunda operação para inserção de elementos na lista, _insertAfter()_, insere um novo item após o item apontado por um iterador. A figura abaixo ilustra o funcionamento deste tipo de inserção.

.Inserção de um item após o item apontado pelo Iterador
image::{img}/insertAfter.png[scaledwidth="60%"]


As operações de remoção _removeFirst_ e _removeAfter_ funcionam de maneira análoga. No caso da operação _removeFirst_, o apontador de cabeça da lista é alterado para apontar para o próximo elemento da lista, fazendo com que não haja mais qualquer referência para o antigo primeiro elemento. Após essa alteração, observada na linha 54 do código fonte anterior, é preciso liberar a memória alocada previamente para armazenar o item. Isso é feito utilizando a função _free()_.

WARNING: Não liberar memória utilizada para armazenar dados não mais utilizados é um erro comum e que pode levar a um vazamento de memória (_memory leak_). Isso pode levar a uma falha na execução por programa por esgotamento da memória livre disponível. Algumas linguagem de programação, como _Java_ por exemplo, implementam um mecanismo automático para liberação de memória sempre que um objeto passa a não ser mais referenciado. Esse mecanismo é conhecido como coletor de lixo ou _garbage collector_.


No caso da operação _removeFirst_ a operação alterar o apontador de próximo do item referenciado pelo iterador para que aponte para um elemento mais adiante (_it->next = it->next->next_).

Em nossa implementação de _LinkedList_ o iterador nada mais é do que um apontador para uma estrutura de _Nó_. A implementação de suas operações faz uso das propriedades da estrutura básica que introduzimos no capítulo 1, conforme a listagem de código abaixo.

.Implementação de um iterador para uma _LinkedList_
[source,c,numbered]
----
include::{local}/listiterator.c[]
----

NOTE: A operação _equal()_ faz uma comparação de apontadores para saber se dois iteradores são iguais. Isso significa comparar os endereços de memória das localidades referenciadas pelos dois iteradores.

Voltemos agora para o exemplo que vimos no capítulo 1 sobre como encontrar o maior elemento de um conjunto de valores lidos da entrada padrão e a média dos divisores deste elemento. Vamos alterar a nossa implementação anterior para utilizar a nossa nova estrutura de dados _LinkedList_.

.Utilizando uma _LinkedList_ para encontrar o maior elemento de um conjunto de valores e a média dos divisores deste elemento
[source,c,numbered]
----
include::{local}/maxemedia3.c[]
----

===== Exercícios

1. Escreva um programa que recebe um conjunto de números inteiros de tamanho desconhecido da entrada padrão e imprime os números lidos na ordem inversa da leitura.
2. Implemente uma função que receba como parâmetro uma lista encadeada e um valor inteiro n e divida a lista em duas, de tal forma que a segunda lista comece no primeiro nó logo após a primeira ocorrência de n na lista original.
3. Implemente uma função que recebe duas listas encadeada l1 e l2 como parâmetros e retorna uma terceira lista l3 obtida pela concatenação de l2 ao final de l1.
4. Implemente uma função que, dados uma lista encadeada e um inteiro não negativo n, remova da lista seus n primeiros nós e retorne a lista resultante. Caso n seja maior que o comprimento da lista, todos os seus elementos devem ser removidos e o resultado da função deve ser uma lista vazia.
5. Escreva um programa que recebe um conjunto de números inteiros de tamanho desconhecido da entrada padrão e imprime os números lidos em ordem crescente.
6. Modifique a estrutura _LinkedList_ apresentada para que ela se comporte como uma lista circular, ou seja, o último elemento da lista deve ter um apontador para o primeiro elemento.

==== Vetor

A seção anterior apresentou a estrutura de lista denominado _LinkedList_, que foi construída tomando por base a estrutura de nó que foi introduzida no capítulo 1 deste livro. A principal característica desta estrutura é sua capacidade de aumentar dinamicamente seu tamanho a medida em que novos elementos vão sendo inseridos na lista. Nesta seção estudaremos outro tipo de lista, denominada _Vector_, que não é baseada na estrutura de nó que vimos anteriormente.

Um _Vector_ (vetor) é uma estrutura de lista que utiliza, ao invés da estrutura encadeada vista anteriormente, um arranjo para armazenar seus elementos.

Antes de apresentarmos a implementação de um vetor, vejamos primeiro como funciona o seu iterador. Isso deixará a implementação do vetor adiante mais clara. 

.Implementação de um iterador para um _Vector_
[source,c,numbered]
----
include::{local}/viterator.c[]
----


A definição para a estrutura de um _Vector_ é reproduzida abaixo. Uma vez que é ineficiente sempre manter o arranjo utilizado para armazenar com o tamanho exato (pense em quantas vezes seria preciso redimensionar o arranjo para acomodar novos elementos), armazenamos na estrutura dados sobre o tamanho do arranjo (campo _size_), indicando a quantidade de elementos atualmente armazenados, e sobre a capacidade (campo _capacity_), que representa o número total de espaços no arranjo. Os índices válidos para acesso aos elementos do _Vector_ estarão sempre no intervalo 0 até _capacity_ - 1 porém só representam elementos válidos os encontrados entre 0 e _size_ - 1.

[source,c,numbered]
----
typedef struct {
        Element         *data;          //Dados armazenados no vector
        int             size;           //Quantidade de dados armazenados
        int             capacity;       //Capacidade máxima do vector
} Vector;
----

Um iterador para um _Vector_ é uma estrutura que encapsula um _Vector_ e um índice de acesso. Para evitarmos manter muitas cópias dos dados na memória principal o _V_Iterator_ armazena apenas uma referência para o _Vector_ ao qual está relacionado, conforme definido abaixo, e esta referência é utilizada para acesso aos dados e campos do _Vector_.

[source,c,numbered]
----
typedef struct {		
	Vector		*vector;	//Referência ao vector associado
	int		index;		//Índice para acessos
} V_Iterator;
----

Os métodos de acesso do _V_Iterator_ (_getElement_ e _setElement_) utilizam esta referência ao _Vector_ associado para poder acessar ou modificar os valores de elementos armazenados no _Vector_. 

É importante notar o funcionamento do método _equal_, que compara dois _V_Iterators_ e retorna 1 se eles forem iguais. Dois _V_Iterators_ são iguais se eles estão associados a um mesmo _Vector_ e referenciam o mesmo elemento deste _Vector_.

[source,c,numbered]
----
/**
 *	Retorna 1 se os dois iteradores apontam para o mesmo elemento do vector.
 *	Tem complexidade O(1).
 */
int equal(V_Iterator *it0, V_Iterator *it1) {
	return ( it0->index  == it1->index ) && (it0->vector == it1->vector);
}
----

Uma vez apresentadas as estruturas de _Vector_ e _V_Iterator_ e a implementação das operações que nos permitem iterar sobre os elementos armazenados em um _Vector_ podemos passar a estudar a implementação do _Vector_  propriamente dita, ilustrada a seguir.

.Implementação de um _Vector_
[source,c,numbered]
----
include::{local}/vector.c[]
----

Na implementação de _Vector_ apresentada temos quatro grupos de funções. O primeiro grupo, formado pelas funções _getSize_, _isEmpty_, _getNth_ e _setNth_ representam as funções mais simples, que são utilizadas para checar a quantidade de elementos em um _Vector_ e para consultar ou alterar valores de elementos armazenados no _Vector_ utilizando um índice de acesso. Também podemos incluir neste grupo inicial a função _createVector_ que, como o próprio nome indica, serve para criar um nova instância de um _Vector_. Cada nova instância é criada com uma capacidade inicial para acomodar 16 elementos. Este valor foi escolhido de forma arbitrária e não limita de forma alguma a utilidade ou funcionamento de um _Vector_.


O segundo grupo, formado pelas funções _getBegin_ e _getEnd_, oferece operações para criar um _V_Iterator_ associado a um determinado _Vector_.
Vejamos a definição da função _getBegin_ abaixo.
[source,c,numbered]
----
/**
 *	Retorna um iterador de vector que aponta para o primeiro elemento do vector. 
 *	Tem complexidade O(1).
 */
V_Iterator getBegin(Vector *vector) {
	V_Iterator it;
	it.vector = vector;
	it.index = 0;
	return it;
}
----
Esta função cria um novo _V_Iterator_ que armazena uma referência para um _Vector_ e que tem seu índice de acesso iniciado com 0, ou seja, o índice que aponta para o primeiro elemento do _Vector_.  A sua função irmã, _getEnd_, funciona de forma análoga, porém, o índice de acesso é iniciado com o valor _size_, ou seja, o valor do índice do elemento que se encontra após o último elemento armazenado no _Vector_, conforme a especificação do tipo abstrato de dados _List_.

O terceiro grupo, formado pelas funções _insertAfter_, _removeAfter_, _prepend_ e _removeFirst_, é responsável pela inserção e remoção de elementos do _Vector_. Todas estas funções têm complexidade _O_(n) porque podem exigir que a movimentação de todos os n elementos de um _Vector_ para acomodar a inserção de um novo elemento ou para eliminar um espaço em branco deixado pela remoção de um elemento. Também faz parte deste grupo a função auxiliar _ensureCapacity_, que é utilizada para garantir que o _Vector_ terá capacidade suficiente par acomodar a inserção de um novo elemento.

Vejamos então, inicialmente, o funcionamento da função auxiliar _ensureCapacity_, cuja definição é apresentada novamente abaixo:

[source,c,numbered]
----
/**
 *	Método auxiliar para garantir que o vector sempre terá capacidade suficiente para acomodar a 
 *	inserção de um novo elemento
 */
void ensureCapacity(Vector *vector, int newCapacity) {

	//Se a capacidade atual for suficiente para acomodar o novo elemento não fazemos nada.
	if(vector->capacity >= newCapacity) return;  
	
	//Se a capacidade não for suficiente, devemos criar um novo arranjo.
	//O novo arranjo terá, no mínimo, o dobro da capacidade anterior.
	int cap = vector->capacity * 2;
	if(newCapacity > cap) cap = newCapacity;
	
	Element *newData = (Element *) malloc(cap * sizeof(Element));
	
	for( int i = 0; i < cap; i++)
		newData[i] = 0;
	
	//E copiar os elementos do arranjo antigo para o novo.
	for( int i = 0; i < vector->size; i++ )
		newData[i] = vector->data[i];
		
	//Liberar a memória utilizada para armazenar o antigo arranjo.
	free(vector->data);
	
	//E alterar o vector para utilizar o novo arranjo.
	vector->data = newData;
	
	//por fim, atualizamos a nova capacidade do vector.
	vector->capacity = cap;	
}
----

O que esta função faz é garantir que o _Vector_ terá capacidade suficiente para acomodar a inserção de um novo elemento. Para isso, ela primeiro checa se a capacidade atual é suficiente para suportar uma inserção. Se esse for o caso, nada preciso ser feito. Porém, se a capacidade não for suficiente é preciso aumentar o tamanho do _Vector_. Isso é feito criando um novo arranjo para acomodar os dados já armazenados no _Vector_ e que tenha capacidade para receber mais elementos. Para isso, criamos um novo arranjo com capacidade no mínimo duas vezes maior que a atual e copiamos todos os elementos atualmente armazenados no _Vector_ para este novo arranjo. Por essa razão, esta operação acaba tendo complexidade _O(n)_.

NOTE: Uma implementação mais inocente desta função poderia simplesmente criar um novo arranjo com capacidade exatamente igual a solicitada. Para entender porque esta opção seria ineficiente pense sobre o que aconteceria se começassem a inserir elementos um a um no _Vector_ em um laço. Uma vez que excedamos a capacidade inicial do _Vector_ cada novo elemento inserido iria exigir que todos os elementos do arranjo existente fossem copiados. É por essa razão que a implementação apresentada, no mínimo, dobra a capacidade do arranjo utilizado quando ele precisa crescer.

Podemos agora passar para a implementação das operações _insertAfter_ e _removeAfter_. Estas funções, como veremos a seguir, são as únicas que efetivamente alteram o tamanho de um _Vector_.

A função _insertAfter_, re-apresentada abaixo, é responsável por inserir um novo elemento no _Vector_ na posição seguinte àquela representada pelo índice do _V_Iterator_, ou sela ela insere um elemento na posição _index_ + 1.

[source,c,numbered]
----
/**
 *      Adiciona um elemento imediatamente após o elemento apontado por it.
 *      Tem complexidade O(n).
 */
void insertAfter(V_Iterator *it, Element newElement) {
	//Garantindo que o vector pode receber um novo elemento.
	ensureCapacity(it->vector, it->vector->size + 1);
	
	//deslocando todos os elementos entre as posições index + 1 e size uma casa para a direita.
	for(int i = it->vector->size; i > it->index + 1; i-- )
		it->vector->data[i] = it->vector->data[i - 1];
			
	//Inseção do novo elemento na posição seguinte a apontada pelo Iterador
	it->vector->data[it->index+1] = newElement;
	
	//Atualizando o tamanho.
	it->vector->size++;
}
----

Para fazer essa inserção a função precisa primeiro abrir o espaço necessário. Para isso, deve deslocar todos os elementos entre a posição _index_ + 1 e _size_ uma casa para a direita, deixando a posição _index_ + 1 pronta para receber um novo elemento. Depois que os elementos são deslocados basta alterar o valor do elemento apropriado no arranjo. Portanto, no pior caso, representando pela inserção na primeira posição, a inserção de um elemento no _Vector_ tem complexidade _O_(n)

A função _removeAfter_, re-apresentada abaixo, funciona de forma análoga. Só que neste caso, os elementos devem ser deslocados para a esquerda para sobre-escreverem o elemento removido. Em seguida, basta atualizar o tamanho do _Vector_ para refletir a remoção de um elemento.

[source,c,numbered]
----
/**
 *      Remove o elemento imediatamente após o elemento apontado por it.
 *      Tem complexidade O(n).
 */
void removeAfter(V_Iterator *it) {

	//Deslocando todos os elementos entre as posições index + 1 e size uma casa para a esquerda
	for(int i = it->index + 1; i < it->vector->size - 1; i++ )
		it->vector->data[i] = it->vector->data[i + 1];
	
	//Atualizando o tamanho.
	it->vector->size--;
}
----


Finalmente, nas funções _prepend_ e _removeFirst_ utilizamos um artifício para evitar duplicação de código. A função _prepend_ é utilizada para inserir um elemento no começo do _Vector_, ou seja, antes do primeiro elemento. Para fazer isso, nós criamos um _V_Iterator_ apontando para o primeiro elemento do _Vector_ utilizando a função _getBegin_ e em seguida decrementamos o seu índice. Com isso, temos um _V_Iterator_ que "aponta" para a posição imediatamente antes do início do _Vector_. Com isso, basta utilizarmos a operação _insertAfter_ para inserirmos um elemento após esta posição, no começo do _Vector_ como queríamos.

O mesmo artifício é utilizado na implementação da operação _removeFirst_, que remove o elemento localizado após o elemento que se encontra uma posição antes do início do _Vector_.

Finalizamos esta seção apresentando uma nova versão da nossa solução para encontrar o maior elemento e a média dos seus divisores utilizando a nossa implementação de _Vector_.

.Utilizando um _Vector_ para encontrar o maior elemento de um conjunto de valores e a média dos divisores deste elemento
[source,c,numbered]
----
include::{local}/maxemedia4.c[]
----


===== Exercícios

1. Implemente uma função que recebe dois _vectors_ v1 e v2 como parâmetros e retorna um terceiro _vector_ obtido pela concatenação de v2 ao final de v1. 
2. Implemente a função _append_ para adicionar um elemento no final de um _Vector_.
3. Implemente a função _reverse_ para inverter a ordem dos elementos em um _Vector_.

=== Recaptulando

Para pode escolher a estrutura de lista correta para resolver um determinado problema precisamos ter em alguma idéia sobre o que vamos precisar fazer com os dados.

* Nosso programa jamais precisará lidar com mais do que 100 itens de dados ou é possível que tenhamos que manipular milhões de registros ?
* Como os dados serão acessados? Sempre em ordem cronológica? Sempre ordenados por nome? Em ordem aleatória?
* Sempre iremos adicionar/remover elementos no começo ou no final da estrutura? Ou precisaremos fazer inserções ou remoções no meio da estrutura?

Precisamos então tentar encontrar um equilíbrio entre os vários requisitos. Se precisarmos acessar frequentemente os dados de 3 formas diferentes, escolha uma estrutura de dados que permite estes 3 tipos de acesso de forma não muito lenta. Não escolha uma estrutura que será insuportavelmente lenta para um dos tipos de acesso independente de quão rápida ela será para os outros dois.

Geralmente, a solução mais simples para um problema é utilizar uma estrutura de arranjo unidimensional. 

Na maioria das vezes, as vantagens em se utilizar uma _LinkedList_ são as desvantagens em se utilizar um _Vector_ e vice-versa.

* Vantagens em se utilizar um _Vector_
	1. Índices: acesso rápido a qualquer elemento da estrutura. Na _LinkedList_ é preciso percorrer toda a lista para se acessar um determinado elemento.
  	2. Acesso mais rápido: de forma geral, é mais rápido acessar um elemento em um arranjo do que em uma _LinkedList_.
  
* Vantagens em se utilizar uma _LinkedList_
  	1. Redimensionamento: a lista pode crescer dinamicamente sempre que seja precisa copiar elementos.
  	2. Inserção/Remoção: É simples inserir ou remover elementos no meio de uma lista.


// Sempre terminar o arquivo com uma nova linha.

