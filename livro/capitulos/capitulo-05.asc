== Pilhas e Filas

=== Introdução

.Objetivos do capítulo
****
Ao final deste capítulo você deverá ser capaz de:

* Entender o funcionamento de pilhas e filas
* Ser capaz de implementar operações para manipulação de elementos de uma pilha e de uma fila
* Ser capaz de decidir quando cada uma destas estruturas deve ser utilizada na resolução de problemas.
****

Neste capítulo estudaremos duas estruturas de dados que possuem regras específicas para inserção e remoção de elementos: Pilhas e Filas.
Estas estruturas são fundamentais para o desenvolvimento de uma vasta gama de algoritmos em diversas áreas de computação. 

Seu funcionamento é baseado em princípios derivados do mundo real. Uma pilha representa um conjunto de elementos que são empilhados um acima do outro, como uma pilha de cartas de baralho, uma pilha de pratos, uma pilha de moedas, uma pilha de panquecas, etc. Já uma fila representa um conjunto de elementos que são enfileirados como pessoas em uma fila de cinema ou requisições em uma fila de escalonamento.

Compreender e ser capaz de utilizar corretamente estas duas estruturas de dados representam um requisito básico para a resolução de um grande número de problemas como veremos mais adiante.

=== Pilhas

Uma pilha (_stack_) é uma estrutura de dados básica que pode ser compreendida logicamente como uma estrutura linear (uma única dimensão) representada por uma pilha física de objetos na qual a inserção e remoção de elementos sempre ocorre em um mesmo lado da pilha, denominado topo.  O conceito básico pode ser ilustrado se pensarmos em nosso conjunto de dados como uma pilha de pratos ou de livros da qual só se pode remover ou adicionar do topo da pilha. Este tipo de estrutura é largamente utilizada em programação e em diversas áreas da computação.

A implementação básica de uma pilha é denominada LIFO (_Last In First Out_) que significa "o último a entrar é o primeiro a sair", o que reflete a forma como os dados são acessados.

Existem duas operações fundamentais para a manipulação de elementos de uma pilha. São elas:

* Inserir um elemento no topo da pilha (_push_)
* Remover um elemento do topo da pilha (_pop_)

.Operações fundamentais para manipulação de pilhas
image::imagens/capitulo-05/pilha.png[scaledwidth="60%"]

Além dessas duas operações, é comum uma implementação de pilha apresentar também operações acessórias como:

* Consultar o elemento no topo da pilha sem removê-lo (_top_)
* Checar se a pilha está vazia (_isEmpty_)
* Checar se a pilha está completa (_isFull_)
* Contar a quantidade de elementos na pilha (_getSize_) 

Apresentamos então a seguir a definição das operações fundamentais e complementares para manipulação de pilhas.

.Definição das operações de uma _Stack_
[source,c,numbered]
----
include::code/capitulo-05/stack.h[]
----

==== Implementação com Lista Encadeada

A forma mais simples de implementar uma Pilha é utilizando uma lista encadeada para armazenar os seus elementos.

.Implementação de _Stack_ utilizando uma _LinkedList_
[source,c,numbered]
----
include::code/capitulo-05/stack.c[]
----

Nesta implementação apresentamos apenas as duas operações fundamentais e duas das operações acessórias. A razão para isso é que como nossa implementação de _Stack_ se baseia em uma _LinkedList_, as demais operações já estão implementadas para este tipo de estrutura e podem ser re-utilizadas para pilhas. Sendo assim, não precisamos re-implementar as operações _isEmpty_ e _getSize_.

A operação _isFull_ foi implementada apenas para retornar 0 uma vez que podemos assumir que uma lista encadeada nunca está completa.

A operação _push_, responsável por inserir um elemento no topo da pilha, é implementada utilizando a função _prepend_, que insere um elemento no começo da lista encadeada.
[source,c,numbered]
----
/**
 * Insere um elemento no topo da pilha. Tem complexidade O(1)
 */
Stack push(Stack stack, Element item) {
	prepend(stack,item);
}
----

Já a operação _pop_, responsável pela remoção de um elemento do topo da pilha, é implementada utilizando a operação _removeFirst_, que remove o primeiro elemento da lista encadeada.
[source,c,numbered]
----
/**
 * Remove o elemento no topo da pilha. Tem complexidade O(1)
 */
Stack pop(Stack stack) {
	removeFirst(stack);
}
----

Finalmente, temos a operação _top_, que retorna o elemento no topo da pilha sem removê-lo. Essa operação pode ser facilmente implementada utilizando a função _getBegin_, que retorna um iterador para o primeiro elemento da lista.

[source,c,numbered]
----
/**
 * Retorna o elemento no topo da pilha sem removê-lo. Tem complexidade O(1)
 */
Element top(Stack stack) {
	return getElement(getBegin(stack));
}
----

==== Aplicações de Pilhas

Pilhas podem ser utilizadas para resolver vários tipos de problemas. Alguns destes problemas são listados a seguir.

===== Convertendo um Número Decimal em Binário

A lógica para converter um número de decimal para binário é a seguinte:

* Leia um número
* Itere (enquanto o número for maior que 0)
	1. Encontre o resto da divisão do número por 2
	2. Imprima o resto
	3. Divida o número por 2
* Fim da iteração

No entanto, há um problema com esta lógica. Suponha que queremos converter o número decimal 23 para binário. Usando esta lógica, obteremos o resultado 11101 ao invés de 10111, que seria o resultado correto.

Para resolver este problema podemos utilizar uma pilha fazendo uso de sua propriedade LIFO. Ao invés de irmos imprimindo os restos das divisão por dois ao longo do algoritmo nós empilhamos esse resto na pilha. Depois que todo o número tiver sido convertido vamos desempilhando digito a digito da pilha e imprimindo. Desta maneira, conseguimos converter corretamente um número decimal para binário. O código a seguir implementa esta algoritmo.

.Convertendo um número decimal para binário
[source,c,numbered]
----
include::code/capitulo-05/decbin.c[]
----

===== Torres de Hanoi


.Torres de Hanoi
image::imagens/capitulo-05/hanoi.jpg[scaledwidth="60%"]

Uma das mais interessantes aplicações de pilhas é a sua utilização para resolver um quebra-cabeças conhecido como Torres de Hanoi. 
De acordo com uma antiga história Brâmane a idade do universo é calculada de acordo com o tempo gasto por um grupo de monges, trabalhando 24 horas por dia, para mover 64 discos de uma torre para para outra, segundo o seguinte conjunto de regras:

1. Você só pode mover um disco por vez
2. Uma terceira torre pode ser utilizada para armazenamento temporário
3. Você não pode colocar um disco de diâmetro _X_ sobre um disco com diâmetro _Y_ se _X_ > _Y_

Assumimos que A é a primeiro torre, onde os discos estão originalmente localizados, B é a segunda torre, para armazenamento temporário, e C é a terceira torre, para onde os discos devem ser movidos de acordo com as regras.

A seguir apresentamos a sequência de passos necessários para resolver o problema das Torres de Hanoi com 3 discos.

image::imagens/capitulo-05/hanoi1.png[scaledwidth="60%"]
image::imagens/capitulo-05/hanoi2.png[scaledwidth="60%"]
image::imagens/capitulo-05/hanoi3.png[scaledwidth="60%"]

A sequência de passos para resolver o problema com 3 discos é: 

1. Move disco de A para C
2. Move disco de A para B
3. Move disco de C para B
4. Move disco de A para C
5. Move disco de B para A
6. Move disco de B para C
7. Move disco de A para C

Se, por outro lado, tivéssemos 4 discos, a seqüência de passos seria: 

1. Move disco de A para B
2. Move disco de A para C
3. Move disco de B para C
4. Move disco de A para B
5. Move disco de C para A
6. Move disco de C para B
7. Move disco de A para B
8. Move disco de A para C
9. Move disco de B para C
10. Move disco de B para A
11. Move disco de C para A
12. Move disco de B para C
13. Move disco de A para B
14. Move disco de A para C
15. Move disco de B para C

Ou seja, para resolver o problema com n discos são necessários 2^n^ - 1 passos.

A seguir apresentamos uma solução recursiva para o problema das Torres de Hanoi. Esta solução utiliza implicitamente uma estrutura de pilha, através de chamadas recursivas de função, para armazenar resultados intermediários e imprimir a ordem correta de movimentação dos discos.

.Solução recursiva para o problema das Torres de Hanoi
[source,c,numbered]
----
include::code/capitulo-05/hanoi.c[]
----

IMPORTANT: É possível modificar esta solução para resolver o problema de forma iterativa, sem recursividade, utilizando uma estrutura de pilha. 

A complexidade da solução apresentada é O(2^n^). Portanto, fica óbvio que este problema só pode ser resolvido para valores pequenos de n (geralmente n <= 30). No caso dos monges, o número de movimentos necessários para transferis os 64 discos, de acordo com as regras apresentada, será 18.446.744.073.709.551.615, o que, com certeza, deve levar um bocado de tempo.

===== Avaliação de Expressões 

Expressões matemáticas podem ser representadas nas notações pre-fixada, pós-fixada e infixada. A conversão de uma notação para a outra pode ser feita utilizando uma pilha. De fato, muitos compiladores utilizam pilhas para analisar a sintaxe de expressões e blocos de programa antes de efetuar a tradução em código de baixo nível. A maioria das linguagens de programação são também linguagens livres de contexto e isto permite que elas sejam analisadas utilizando pilhas.

A expressão em notação infixada (((2 * 5) - (1 * 2))/(11-9)) ao ser avaliada deve resultar no valor 4. Para avaliar este tipo de expressão devemos analisar 5 tipos de caracteres:

* Abertura de parênteses
* Números
* Operadores
* Fechamento de parênteses
* Quebra de linha

O processamento de uma expressão com essa envolve um conjunto de operações com uma pilha. Um algoritmo para a avaliação de expressões é descrito a seguir:

. Ler caractere da entrada
. Ações a serem tomadas para cada caractere:
.. Abertura de parênteses:  inserir no topo da pilha e repetir passo 1
.. Número: inserir no topo da pilha e repetir passo 1
.. Operador:  inserir no topo da pilha e repetir passo 1
.. Fechamento de parênteses: remover elemento do topo da pilha. 
... Se o caractere for uma abertura de parênteses, descartar e repetir passo 1.
... Se não, devemos remover os próximos três elementos do topo da pilha. O primeiro elemento será denominado op2, o segundo op e o terceiro op1.  Devemos então avaliar a expressão op1 op op2, onde op1 e op2 são números e op é um operador. O resultado dessa expressão deve então ser inserido no topo da pilha
.. Quebra de linha: remover o elemento do topo da pilha e imprimir o resultado

Exemplo do funcionamento deste algoritmo:
Dada a expressão (((2 * 5) - (1 * 2)) / (11 - 9)) o conteúdo da pilha durante sua avaliação seria o seguinte:


[width="60%",cols="3"]
[frame="topbot"]
|=======================
| Símbolo na entrada | Conteúdo da pilha | Operação
| (  | (     	|
| (  | ( (    	|
| (  | ( ( (   	|
| 2  | ( ( ( 2  	|
| *  | ( ( ( 2 * 	|
| 5  | ( ( ( 2 * 5 	| (((2*5
| )  | ( ( 10     | 2 * 5 = 10 e _push_
| -  | ( ( 10 -	 |
| (  | ( ( 10 - ( |
| 1  | ( ( 10 - ( 1 |
| *  | ( ( 10 - ( 1 * |
| 2 | ( ( 10 - ( 1 * 2 |
| ) | ( ( 10 - 2  	| 1 * 2 = 2 e _push_
| ) | ( 8  | 10 - 2 = 8 e _push_
| / | ( 8 / |
| ( | ( 8 / ( |
| 11 | ( 8 / ( 11  |
| - | ( 8 / ( 11 - 9 |
| ) | ( 8 / 2   | 11 - 9 = 2 e _push_
| ) | 4    | 8 / 2 = 4 e push
| quebra de linha |  | _pop_ e imprime resultado
|=======================

===== Exercícios
. Implemente um programa capaz de avaliar expressões matemáticas em notação infixada
. Implemente um solução para o problema das Torres de Hanoi sem utilizar recursividade

=== Filas

Uma fila (_queue_) é uma outra variação lógica de uma estrutura de armazenamento linear que representa um enfileiramento de elementos. O conceito também reflete uma estrutura básica encontrada no mundo real, utilizado geralmente para disciplinar o acesso a algum tipo de recurso.

O funcionamento padrão de uma fila é FIFO (_First In First Out_) que significa "o primeiro a entrar é o primeiro a sair". 

De forma análoga às pilhas, existem duas operações básicas para gerenciar a inserção e remoção de elementos de uma fila. São elas:

 * Inserir um elemento no final da fila (_enqueue_)
 * Remover um elemento do começo da fila (_dequeue_)

A figura abaixo ilustra o funcionamento destas operações.

.Funcionamento das operações _enqueue_ e _dequeue_
image::imagens/capitulo-05/fila.png[scaledwidth="60%"]
 
Assim como no caso das pilhas, as filas também possuem 4 operações acessórias:

 * Consultar o elemento na cabeça da fila sem removê-lo (_front_)
 * Checar se a fila está vazia (_isEmpty_) 
 * Checar se a fula está completa (_isFull_)
 * Contar a quantidade de elementos na fila (_getSize_)
 
 
Apresentamos a seguir a definição das operações fundamentais e complementares para manipulação de filas.
 
.Definição das operações de uma _Queue_
[source,c,numbered]
----
include::code/capitulo-05/queue.h[]
----

==== Implementação baseada na nossa estrutura de Nó.

Mais uma vez, a forma mais simples de se implementar uma Fila é utilizar uma lista encadeada como estrutura base para armazenar os seus elementos e escrever as rotinas que disciplinam a inserção e remoção de elementos da estrutura.

Porém, desta vez, seguiremos uma abordagem um pouco diferente da adotada na nossa implementação para a estrutura de pilha. Ao invés de basearmos nossa implementação na utilização direta da estrutura _LinkedList_, daremos uma passo para trás no nível de abstração e utilizaremos diretamente a estrutura de Nó definida no capítulo 1 deste livro. A razão para isso é arejar a cabeça do leitor mostrando uma nova variação de estrutura de dados primária.

A seguir vemos uma implementação de Fila baseada na nossa estrutura de Nó.

.Implementação das operações de uma _Queue_ utilizando a estrutura _Node_
[source,c,numbered]
----
include::code/capitulo-05/queue.c[]
----
A primeira coisa a observar nesta implementação é a definição do tipo abstrato de dados _Queue_. Este tipo, ilustrado no segmento de código a seguir, apresenta dois apontadores para Nó. O primeiro apontador é utilizado para referenciar a cabeça da fila enquanto que o segundo referencia sua cauda. Essa necessidade já seria esperada se considerarmos que os elementos são inseridos e removidos de locais diferentes da fila. Além disso, a estrutura armazena também um contador de itens inseridos na fila, utilizado para tornar trivial a implementação das operações _isEmpty_ e _getSize_.

.Definição do Tipo Abstrato de Dados _Queue_
[source,c,numbered]
----
typedef struct {
	Node *head;
	Node *tail;
	int size;
} Queue;
----

A primeira operação fundamental de uma fila, _enqueue_, utilizada para inserir elementos no final da fila, tem sua implementação re-apresentada a seguir.

.Implementação da operação _enqueue_
[source,c,numbered]
----
/**
 * Insere um elemento no final da fila. Tem complexidade O(1)
 */
void enqueue(Queue *queue, Element item) {
	if(isEmpty(queue)) {
		queue->head = makeNode(item,NULL);
		queue->tail = queue->head;
	}
	else {
		Node *nn = makeNode(item,NULL);
		queue->tail->next = nn;
		queue->tail = nn;
	}
	queue->size++;
}
----

Nesta implementação é possível observar que há dois casos a serem tratados. O primeiro caso envolve a inserção de elementos em uma lista vazia. Nesta situação, o elemento é inserido na cabeça da lista e este único elemento passa então a ser tanto o primeiro quanto o último elemento da lista.

O segundo caso acontece quando inserimos elementos em uma lista não-vazia. Nesta situação, o elemento deve ser inserido após o último elemento já presente na lista, referenciado pelo apontador de cauda _tail_. Em seguida este apontador deve ser atualizado para apontar para o novo último elemento da lista.

A implementação do método que remove elementos de uma fila, _dequeue_, ilustrada a seguir, é um pouco mais simples.

.Implementação da operação _dequeue_
[source,c,numbered]
----
/**
 * Remove o elemento na cabeça da fila. Tem complexidade O(1)
 */
Element dequeue(Queue *queue) {
	Element v = getValue(queue->head);
	Node *nn = queue->head;
	queue->head = queue->head->next;
	queue->size--;
	if(isEmpty(queue))
		queue->tail = queue->head;
	free(nn);

	return v;
}
----

Esta operação salva o valor do elemento armazenado na cabeça da fila em uma variável temporária e em seguida atualiza o apontador de cabeça para que ele aponte para o próximo elemento na fila ("a fila anda"). Após a atualização do contador de elementos na fila, checa-se se a fila está vazia. Se isso ocorrer, atualizamos também o apontador de cauda.

Como mencionado anteriormente, a implementação das operações acessórias é trivial e não será discutida em detalhes aqui. Uma observação diz respeito a função _isFull_, que sempre retorna 0. Isso acontece por assumirmos que a memória sempre permitirá a criação de um novo Nó para inserção no final da fila, portanto, a fila nunca estará completa.

==== Aplicações de Filas

Filas são, assim como pilhas, estruturas de dados que sempre permeiam o desenvolvimento de algoritmos. Aplicações que requerem sua utilização são muito frequentes e muitas vezes envolvem problemas de otimização e escalonamento, como os que estudaremos na disciplinas de Sistemas Operacionais. 

Além disso, uma aplicação clássicas das filas é sua utilização para o cálculo de distâncias. 


===== Cálculo de Distâncias

Imagine 6 cidades numeradas de 0 a 5 e interligadas por estradas de mão única. (É claro que você pode trocar "6" pelo seu número favorito.) As ligações entre as cidades são representadas por uma matriz A da seguinte maneira:

A[i][j] vale 1 se existe estrada da cidade i para a cidade j

e vale 0 em caso contrário. 

Suponha que a matriz tem zeros na diagonal, embora isso não seja importante.


Um exemplo desta matriz, que chamaremos de matriz de conectividade, é apresentado a seguir.

image::imagens/capitulo-05/matriz-conect.png[scaledwidth="60%"]

A distância de uma cidade c a uma outra j é o menor número de estradas que devo percorrer para ir de c a j.  Nosso problema: dada uma cidade c, determinar a distância de c a cada uma das demais cidades.

As distâncias serão armazenadas em um vetor d: a distância de c a j será d[j].  Que fazer se é impossível chegar de c a j?  Poderíamos dizer nesse caso que d[j] é infinito.  Mas é mais limpo e prático dizer que d[j] vale 6, pois nenhuma distância "real" pode ser maior que 5.  Se adotarmos c igual a 3 no exemplo acima, teremos d igual a 

image::imagens/capitulo-05/matriz-conect2.png[scaledwidth="60%"]

Eis a idéia de um algoritmo que usa o conceito de fila para resolver nosso problema: 

 * uma cidade é considerada ativa se já foi visitada mas as estradas que começam nela ainda não foram exploradas;
 * mantenha uma fila das cidades ativas;
 * em cada iteração, remova da fila uma cidade i e insira na fila todas as cidades vizinhas de i que ainda não foram visitadas.

A seguir temos um programa que implementa este algoritmo para encontrar a menor distância entre a cidade 0 e as demais 5 cidades.
Para fins de ilustração, a matriz de conectividade é gerada de forma aleatória.

.Programa que utiliza uma fila para encontrar a menor distância entre um grupo de cidades
[source,c,numbered]
----
include::code/capitulo-05/dist.c[]
----

===== Exercícios

. Seria possível implementar uma estrutura de fila com apenas um apontador para a cabeça da fila? Justifique sua resposta.
. Quais seriam os impactos dessa alteração na complexidade assintótica das suas funções?
. Quais seriam os impactos da remoção do campo _size_ na complexidade assintótica das funções de manipulação de filas?
 

=== Recaptulando
 
É importante fazer neste momento um paralelo entre o funcionamento de estruturas FIFO, como as filas, e as estruturas LIFO, como as pilhas. A figura abaixo ilustra bem estas diferentes. Estruturas do tipo FIFO preservam a "ordem de chegada" dos elementos enquanto que em estruturas do tipo LIFO esta ordem acaba sendo invertida.
 
.Comparação do funcionamento de estruturas LIFO e FIFO
image::imagens/capitulo-05/lifo.png[scaledwidth="60%"]
 
Observamos que em estruturas LIFO os elementos são inseridos e removidos da mesma extremidade da estrutura. Em se tratando de uma pilha, são inseridos e removidos do topo da pilha.  Já no caso de uma estrutura FIFO, os elementos são inseridos em uma extremidade (cauda da fila) e removidos da outra extremidade (cabeça da fila). 

Estas são duas das principais estruturas de dados que estudaremos e, apesar de apresentarem um funcionamento bastante simples, são amplamente utilizadas na Ciência da Computação para a implementação de soluções para os mais diversos problemas, desde a implementação de jogos até a resolução de intrincados problemas de escalonamento.
 
// Sempre terminar o arquivo com uma nova linha.


