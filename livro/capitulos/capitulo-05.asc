== Pilhas e Filas

:cap: capitulo-05
:online: {gitrepo}/blob/master/livro/capitulos/code/{cap}
:local: {code_dir}/{cap}
:img: {image_dir}/{cap}

.Objetivos do capítulo
____
Ao final deste capítulo você deverá ser capaz de:

* Entender o funcionamento de pilhas e filas
* Ser capaz de implementar operações para manipulação de elementos de
  uma pilha e de uma fila
* Ser capaz de decidir quando cada uma destas estruturas deve ser
  utilizada na resolução de problemas.

____

Neste capítulo estudaremos duas estruturas de dados que possuem regras
específicas para inserção e remoção de elementos: *Pilhas* e *Filas*.
Estas estruturas são fundamentais para o desenvolvimento de uma vasta
gama de algoritmos em diversas áreas de computação.

Seu funcionamento é baseado em princípios derivados do mundo real. Uma
pilha representa um conjunto de elementos que são empilhados um acima
do outro, como uma pilha de cartas de baralho, uma pilha de pratos,
uma pilha de moedas, uma pilha de panquecas, etc. Já uma fila
representa um conjunto de elementos que são enfileirados como pessoas
em uma fila de cinema ou requisições em uma fila de escalonamento.

Compreender e ser capaz de utilizar corretamente estas duas estruturas
de dados representam um requisito básico para a resolução de um grande
número de problemas como veremos mais adiante.

=== Pilhas

Uma pilha (_stack_, em inglês) é uma estrutura de dados básica que
pode ser compreendida logicamente como uma estrutura linear (uma única
dimensão) representada por uma pilha física de objetos na qual a
inserção e remoção de elementos _sempre ocorre no topo da pilha_.  O
conceito básico pode ser ilustrado se pensarmos em nosso conjunto de
dados como uma pilha de pratos ou uma pilha de livros, da qual só se pode remover
ou adicionar no topo da pilha. Este tipo de estrutura é largamente
utilizada em programação e em diversas áreas da computação.

A implementação básica de uma pilha é denominada LIFO (_Last In First
Out_) que significa `o último a entrar é o primeiro a sair', o que
reflete a forma como os dados são acessados.

Existem duas operações fundamentais para a manipulação de elementos de
uma pilha. São elas:

* Inserir um elemento no topo da pilha (`push`)
* Remover um elemento do topo da pilha (`pop`)

.Operações fundamentais para manipulação de pilhas: `push` e `pop`
image::{img}/pilha.png[scaledwidth="60%"]

Além dessas duas operações, é comum uma implementação de pilha
apresentar também operações acessórias como:

.Funções complementares em pilhas
[width="90%",cols="^m,4",frame="topbot",options="header,footer"]
|====
| Função | Descrição
| top | Consultar o elemento no topo da pilha sem removê-lo.
| isEmpty | Checar se a pilha está vazia.
| isFull | Checar se a pilha está completa.
| getSize | Consultar a quantidade de elementos na pilha.
|====

Apresentamos então a seguir a definição das operações fundamentais e
complementares para manipulação de pilhas.

.Definição das operações de uma `stack`
====
.Código fonte
{online}/stack.h[{local}/stack.h]

[source,c,numbered]
----
include::{local}/stack.h[]
----

====


==== Implementação com Lista Encadeada

A forma mais simples de implementar uma Pilha é utilizando uma lista
encadeada para armazenar os seus elementos.

.Implementação de `stack` utilizando uma _LinkedList_
====
.Código fonte
{online}/stack.c[{local}/stack.c]

[source,c,numbered]
----
include::{local}/stack.c[]
----

====


Nesta implementação apresentamos apenas as duas operações fundamentais
e duas das operações acessórias. A razão para isso é que como nossa
implementação de `stack` se baseia em uma _LinkedList_, as demais
operações já estão implementadas para este tipo de estrutura e podem
ser re-utilizadas para pilhas. Sendo assim, não precisamos
re-implementar as operações `isEmpty` e `getSize`.

A operação `isFull` foi implementada apenas para retornar `0` uma vez
que podemos assumir que uma lista encadeada nunca está completa.

A operação `push`, responsável por inserir um elemento no topo da
pilha, é implementada utilizando a função `prepend`, que insere um
elemento no começo da lista encadeada.

[source,c,numbered]
----
/**
 * Insere um elemento no topo da pilha. Tem complexidade O(1).
 */
Stack push(Stack stack, Element item) {
  prepend(stack,item);
}
----

Já a operação `pop`, responsável pela remoção de um elemento do topo
da pilha, é implementada utilizando a operação `removeFirst`, que
remove o primeiro elemento da lista encadeada.

[source,c,numbered]
----
/**
 * Remove o elemento no topo da pilha. Tem complexidade O(1).
 */
Stack pop(Stack stack) {
  removeFirst(stack);
}
----

Finalmente, temos a operação `top`, que retorna o elemento no topo da
pilha sem removê-lo. Essa operação pode ser facilmente implementada
utilizando a função `getBegin`, que retorna um iterador para o
primeiro elemento da lista.

[source,c,numbered]
----
/**
 * Retorna o elemento no topo da pilha sem removê-lo.
 * Tem complexidade O(1).
 */
Element top(Stack stack) {
  return getElement(getBegin(stack));
}
----

==== Aplicações de Pilhas

Pilhas podem ser utilizadas para resolver vários tipos de problemas.
Alguns destes problemas são listados a seguir.

===== Convertendo um Número Decimal em Binário

A lógica para converter um número de decimal para binário é a
seguinte:

. Leia um número
. Itere (enquanto o número for maior que 0)
.. Encontre o resto da divisão do número por 2
.. Imprima o resto
.. Divida o número por 2
. Fim da iteração

No entanto, há um problema com esta lógica. Suponha que queremos
converter o número decimal `23` para binário. Usando esta lógica,
obteremos o resultado `11101` ao invés de `10111`, que seria o resultado
correto.

Para resolver este problema podemos utilizar uma pilha fazendo uso de
sua propriedade LIFO. Ao invés de irmos imprimindo os restos das
divisão por dois ao longo do algoritmo, nós empilhamos esse resto na
pilha. Depois que todo o número tiver sido convertido vamos
desempilhando digito a digito da pilha e imprimindo. Desta maneira,
conseguimos converter corretamente um número decimal para binário. O
código a seguir implementa esta algoritmo.

.Convertendo um número decimal para binário
====
.Código fonte
{online}/decbin.c[{local}/decbin.c]

[source,c,numbered]
----
include::{local}/decbin.c[]
----

====

===== Torres de Hanoi


.Torres de Hanoi
image::{img}/hanoi.jpg[scaledwidth="60%"]

Uma das mais interessantes aplicações de pilhas é a sua utilização
para resolver um quebra-cabeças conhecido como Torres de Hanoi.  De
acordo com uma antiga história Brâmane a idade do universo é calculada
de acordo com o tempo gasto por um grupo de monges, trabalhando 24
horas por dia, para mover 64 discos de uma torre para para outra,
segundo o seguinte conjunto de regras:

1. Você só pode mover um disco por vez
2. Uma terceira torre pode ser utilizada para armazenamento temporário
3. Você não pode colocar um disco de diâmetro `X` sobre um disco com
   diâmetro `Y` se `X > Y`

Assumimos que A é a primeiro torre, onde os discos estão originalmente
localizados, B é a segunda torre, para armazenamento temporário, e C é
a terceira torre, para onde os discos devem ser movidos de acordo com
as regras.

A seguir apresentamos a sequência de passos necessários para resolver
o problema das Torres de Hanoi com 3 discos.

image::{img}/hanoi1.png[scaledwidth="60%"]
image::{img}/hanoi2.png[scaledwidth="60%"]
image::{img}/hanoi3.png[scaledwidth="60%"]

A sequência de passos para resolver o problema com 3 discos é:

1. Move disco de A para C
2. Move disco de A para B
3. Move disco de C para B
4. Move disco de A para C
5. Move disco de B para A
6. Move disco de B para C
7. Move disco de A para C

Se, por outro lado, tivéssemos 4 discos, a sequência de passos seria:

1. Move disco de A para B
2. Move disco de A para C
3. Move disco de B para C
4. Move disco de A para B
5. Move disco de C para A
6. Move disco de C para B
7. Move disco de A para B
8. Move disco de A para C
9. Move disco de B para C
10. Move disco de B para A
11. Move disco de C para A
12. Move disco de B para C
13. Move disco de A para B
14. Move disco de A para C
15. Move disco de B para C

Ou seja, para resolver o problema com n discos são necessários 2^n^ - 1 passos.

A seguir apresentamos uma solução recursiva para o problema das Torres
de Hanoi. Esta solução utiliza implicitamente uma estrutura de pilha,
através de chamadas recursivas de função, para armazenar resultados
intermediários e imprimir a ordem correta de movimentação dos discos.

.Solução recursiva para o problema das Torres de Hanoi
====
.Código fonte
{online}/hanoi.c[{local}/hanoi.c]

[source,c,numbered]
----
include::{local}/hanoi.c[]
----

====

IMPORTANT: É possível modificar esta solução para resolver o problema
de forma iterativa, sem recursividade, utilizando uma estrutura de
pilha.

A complexidade da solução apresentada é O(2^n^). Portanto, fica óbvio
que este problema só pode ser resolvido para valores pequenos de n
(geralmente `n<=30`). No caso dos monges, o número de movimentos
necessários para transferir os 64 discos, de acordo com as regras
apresentada, será _18.446.744.073.709.551.615_, o que, com certeza, deve
levar um bocado de tempo.

===== Calculadora pós-fixada

Algumas calculadoas (http://google.com/search?tbm=isch&q=rpn+calculator[científicas e financeiras])
funcionam de forma diferente. Nelas inserimos primeiros os números
e depois os operadores, esta notação é conhecida como Polonesa
Inversa ou _infixada_.

Em relação à posição do operador (sinal da operação) e os
operandos (números ou variáveis) existem três tipos de notações:

_pré-fixada_ :: O operador vem *antes* dos operandos.
_infixada_:: O operador vem *entre* os operandos, é a notação mais
conhecida, que utilizamos na matemática.
_pós-fixada_ :: O operador vem *depois* dos operandos.

Algumas calculadoas (http://google.com/search?tbm=isch&q=rpn+calculator[científicas e financeiras])
utilizam a notação _pós-fixada_ para realização de cálculos,
veja a diferença entre esta notação e a _infixada_:

[width="80%",cols="^m,^m,^m",options="header"]
|====
|_infixada_ | _pós-fixada_ | Resultado
| `2 + 3`   | `2 3 +` | 5
| `2 + 3 * 4`     | `2 3 4 * +` | 14
| `2 + (3 * 4)`   | `2 3 4 * +` | 14
| `2 x 3 + 4`     | `2 3 * 4 +` | 10
| `2 x (3 + 4)`   | `2 3 4 + *` | 14
|====

O algorítmo da calculadora pós-fixada é o seguinte:

....
Leia uma entrada
  Se a entrada for um número
    Empilhe o número lido
  Se a entrada for um operador
    Desempilhe dois valores da pilha
    Realize a operação lida utilizando os dois valores
    Empilhe o resultado na pilha
....

Em outras palavras, você pode imaginar que os operandos
(os números) estão numa pilha, quando um operador (o sinal) for
encontrado, basta desempilhar dois operandos, realizar a operação
entre eles e empilhar o resultado (colocando-o no topo da pilha).
A <<tab_execucao_operacao_pos_fixada>> ilustra a execução da
seguinte operação pós-fixada: `2 3 4 + *`.

[[tab_execucao_operacao_pos_fixada]]
.Execução da operação pós-fixada: `2 3 4 + *`
[cols="^m,^3,<m",options="header"]
|====
| _Leitura_ | Ações | Pilhafootnote:[Em destaque o topo da pilha.]
| `2`   | empilha o valor lido: `2` | `[2]`
| `3` | empilha o valor lido: `3` | `[3] 2`
| `4`     | empilha o valor lido: `4` | `[4] 3 2`
| `+`   | desempilha `4` e `3`, empilha a soma deles | `[7] 2`
| `*` | desempilha `7` e `2`, empilha a multiplicação deles | `[14]`
|====

===== Exercícios
. Implemente o algorítmo da calculadora pós-fixada utilizando uma
pilha. A calculadora deve:
+
* Realizar operações com números de ponto flutuante (`double`).
* Utilizar os operandos `+ - * /` para as operações de soma,
subtração, multiplicação e divisão respectivamente.
* Utilizar o operador `t` para imprimir o valor do topo da pilha
+
TIP: Você pode utilizar as funções `double atof(const char *nptr)`
para converter um string para `double`.

===== Avaliação de Expressões

Expressões matemáticas podem ser representadas nas notações
_pré-fixada_, _pós-fixada_ e _infixada_. Como você já viu, a
conversão de uma notação
para a outra pode ser feita utilizando uma pilha. De fato, muitos
compiladores utilizam pilhas para analisar a sintaxe de expressões e
blocos de programa antes de efetuar a tradução em código de baixo
nível.

////
Os alunos não estudaram LC ainda, só no próximo semestre:

A maioria das linguagens de programação são também linguagens
livres de contexto e isto permite que elas sejam analisadas utilizando
pilhas.
////

A expressão em notação infixada `(((2 * 5) - (1 * 2))/(11-9))` ao ser
avaliada deve resultar no valor `4`. Para avaliar este tipo de expressão
devemos analisar 5 tipos de entradas:

* Carácter de abertura de parênteses
* Números
* Operadores
* Carácter de fechamento de parênteses
* Quebra de linha

O processamento de uma expressão com essa envolve um conjunto de
operações com uma pilha. Um algoritmo para a avaliação de expressões é
descrito a seguir:

. Ler caractere da entrada
. Ações a serem tomadas para cada caractere:
.. Abertura de parênteses:  inserir no topo da pilha e repetir passo 1
.. Número: inserir no topo da pilha e repetir passo 1
.. Operador:  inserir no topo da pilha e repetir passo 1
.. Fechamento de parênteses: remover elemento do topo da pilha.
... Se o caractere for uma abertura de parênteses, descartar e repetir passo 1.
... Se não, devemos remover os próximos três elementos do topo da
pilha. O primeiro elemento será denominado `op2`, o segundo `op` e o
terceiro `op1`.  Devemos então avaliar a expressão `op1  op op2`,
onde `op1` e `op2` são números e `op` é um operador. O resultado dessa expressão deve então ser inserido no topo da pilha
.. Quebra de linha: remover o elemento do topo da pilha e imprimir o resultado

Exemplo do funcionamento deste algoritmo:
Dada a expressão `(((2 * 5) - (1 * 2)) / (11 - 9))` o conteúdo da pilha durante sua avaliação seria o seguinte:


[width="90%",cols="^1,^3,^4"]
[frame="topbot"]
|=======================
| Símbolo na entrada | Conteúdo da pilha | Operação
| (  | (     	|
| (  | ( (    	|
| (  | ( ( (   	|
| 2  | ( ( ( 2  	|
| *  | ( ( ( 2 * 	|
| 5  | ( ( ( 2 * 5 	| (((2*5
| )  | ( ( 10     | 2 * 5 = 10 e `push`
| -  | ( ( 10 -	 |
| (  | ( ( 10 - ( |
| 1  | ( ( 10 - ( 1 |
| *  | ( ( 10 - ( 1 * |
| 2 | ( ( 10 - ( 1 * 2 |
| ) | ( ( 10 - 2  	| 1 * 2 = 2 e `push`
| ) | ( 8  | 10 - 2 = 8 e `push`
| / | ( 8 / |
| ( | ( 8 / ( |
| 11 | ( 8 / ( 11  |
| - | ( 8 / ( 11 - 9 |
| ) | ( 8 / 2   | 11 - 9 = 2 e `push`
| ) | 4    | 8 / 2 = 4 e `push`
| `\n` |  | `pop` e imprime resultado
|=======================

===== Exercícios
. Implemente um programa capaz de avaliar expressões matemáticas em
  notação infixada
. Implemente um solução para o problema das Torres de Hanoi sem
  utilizar recursividade

=== Filas

Uma fila (_queue_ em inglês) é uma outra variação lógica de uma estrutura de
armazenamento linear que representa um enfileiramento de elementos. O
conceito também reflete uma estrutura básica encontrada no mundo real,
utilizado geralmente para disciplinar o acesso a algum tipo de
recurso.

O funcionamento padrão de uma fila é FIFO (_First In First Out_) que
significa _o primeiro a entrar é o primeiro a sair_.

De forma análoga às pilhas, existem duas operações básicas para
gerenciar a inserção e remoção de elementos de uma fila. São elas:

 * Inserir um elemento no final da fila (`enqueue`)
 * Remover um elemento do começo da fila (`dequeue`)

A figura abaixo ilustra o funcionamento destas operações.

.Funcionamento das operações `enqueue` e `dequeue`
image::{img}/fila.png[scaledwidth="60%"]

Assim como no caso das pilhas, as filas também possuem 4 operações
complementares:

.Funções complementares em pilhas
[width="90%",cols="^m,4",frame="topbot",options="header,footer"]
|====
| Função | Descrição
| front | Consultar o elemento na cabeça da fila sem removê-lo.
| isEmpty | Checar se a fila está vazia.
| isFull | Checar se a fula está completa.
| getSize | Contar a quantidade de elementos na fila.
|=====

Apresentamos a seguir a definição das operações fundamentais e
complementares para manipulação de filas.

.Definição das operações de uma `queue`
====
.Código fonte
{online}/queue.h[{local}/queue.h]

[source,c,numbered]
----
include::{local}/queue.h[]
----

====


==== Implementação baseada na nossa estrutura de Nó.

Mais uma vez, a forma mais simples de se implementar uma Fila é
utilizar uma lista encadeada como estrutura base para armazenar os
seus elementos e escrever as rotinas que disciplinam a inserção e
remoção de elementos da estrutura.

Porém, desta vez, seguiremos uma abordagem um pouco diferente da
adotada na nossa implementação para a estrutura de pilha. Ao invés de
basearmos nossa implementação na utilização direta da estrutura
_LinkedList_, daremos uma passo para trás no nível de abstração e
utilizaremos diretamente a estrutura de Nó definida no capítulo 1
deste livro. A razão para isso é arejar a cabeça do leitor mostrando
uma nova variação de estrutura de dados primária.

A seguir vemos uma implementação de Fila baseada na nossa estrutura de
Nó.

.Implementação das operações de uma `queue` utilizando a estrutura _Node_
====
.Código fonte
{online}/queue.c[{local}/queue.c]

[source,c,numbered]
----
include::{local}/queue.c[]
----

====

A primeira coisa a observar nesta implementação é a definição do tipo
abstrato de dados `Queue`. Este tipo, ilustrado no segmento de código
a seguir, apresenta dois apontadores para Nó. O primeiro apontador é
utilizado para referenciar a _cabeça da fila_ enquanto que o segundo
referencia sua _cauda_. Essa necessidade já seria esperada se
considerarmos que os elementos são inseridos e removidos de locais
diferentes da fila. Além disso, a estrutura armazena também um
contador de itens inseridos na fila, utilizado para tornar trivial a
implementação das operações `isEmpty` e `getSize`.

.Definição do Tipo Abstrato de Dados `queue`
[source,c,numbered]
----
typedef struct {
	Node *head;
	Node *tail;
	int size;
} Queue;
----

A primeira operação fundamental de uma fila, `enqueue`, utilizada para
inserir elementos no final da fila, tem sua implementação
reapresentada a seguir.

.Implementação da operação `enqueue`
[source,c,numbered]
----
/**
 * Insere um elemento no final da fila. Tem complexidade O(1)
 */
void enqueue(Queue *queue, Element item) {
  if(isEmpty(queue)) {
    queue->head = makeNode(item,NULL);
    queue->tail = queue->head;
  }
  else {
    Node *nn = makeNode(item,NULL);
    queue->tail->next = nn;
    queue->tail = nn;
  }
  queue->size++;
}
----

Nesta implementação é possível observar que há dois casos a serem
tratados. O primeiro caso envolve a inserção de elementos em uma lista
vazia. Nesta situação, o elemento é inserido na _cabeça da lista_ e este
único elemento passa então a ser tanto o primeiro quanto o último
elemento da lista.

O segundo caso acontece quando inserimos elementos em uma lista
não-vazia. Nesta situação, o elemento deve ser inserido após o último
elemento já presente na lista, referenciado pelo apontador de cauda
(`tail`). Em seguida este apontador deve ser atualizado para apontar
para o novo último elemento da lista.

A implementação do método que remove elementos de uma fila, `dequeue`,
ilustrada a seguir, é um pouco mais simples.

.Implementação da operação `dequeue`
[source,c,numbered]
----
/**
 * Remove o elemento na cabeça da fila. Tem complexidade O(1).
 */
Element dequeue(Queue *queue) {
  Element v = getValue(queue->head);
  Node *nn = queue->head;
  queue->head = queue->head->next;
  queue->size--;
  if(isEmpty(queue))
    queue->tail = queue->head;
  free(nn);
  return v;
}
----

Esta operação salva o valor do elemento armazenado na _cabeça da fila_
em uma variável temporária e em seguida atualiza o _apontador de cabeça_
para que ele aponte para o próximo elemento na fila (``a fila anda'').
Após a atualização do contador de elementos na fila, checa-se se a
fila está vazia. Se isso ocorrer, atualizamos também o apontador de
cauda.

Como mencionado anteriormente, a implementação das operações
acessórias é trivial e não será discutida em detalhes aqui. Uma
observação diz respeito a função `isFull`, que sempre retorna 0. Isso
acontece por assumirmos que a memória sempre permitirá a criação de um
novo Nó para inserção no final da fila, portanto, a fila nunca estará
completa.

==== Aplicações de Filas

Filas são, assim como pilhas, estruturas de dados que sempre permeiam
o desenvolvimento de algoritmos. Aplicações que requerem sua
utilização são muito frequentes e muitas vezes envolvem problemas de
otimização e escalonamento, como os que estudaremos na disciplinas de
Sistemas Operacionais.

Além disso, uma aplicação clássicas das filas é sua utilização para o
cálculo de distâncias.


===== Cálculo de Distâncias

// FIXME: Esta aplicação de Fila é muito complicada, difícil de
// acompanhar, utilizar exemplo mais simples.

Imagine 6 cidades numeradas de 0 a 5 e interligadas por estradas de
mão única. (É claro que você pode trocar ``6'' pelo seu número
favorito.) As ligações entre as cidades são representadas por uma
matriz A da seguinte maneira:

// Troca `1` por TRUE e `0` por FALSE

`A[i][j]` vale `1` se existe estrada da cidade `i` para a cidade `j`
e vale `0` em caso contrário.

Suponha que a matriz tem zeros na diagonal, embora isso não seja
importante.


Um exemplo desta matriz, que chamaremos de matriz de conectividade, é
apresentado a seguir.

.Matriz de conectividade
image::{img}/matriz-conect.png[scaledwidth="60%"]

A distância de uma cidade `c` a uma outra `j` é o menor número de estradas
que devo percorrer para ir de `c` a `j`.  Nosso problema: dada uma cidade
`c`, determinar a distância de `c` a cada uma das demais cidades.

As distâncias serão armazenadas em um vetor `d`: a distância de `c` a `j`
será `d[j]`.  Que fazer se é impossível chegar de `c` a `j`?  Poderíamos
dizer nesse caso que `d[j]` é infinito.  Mas é mais limpo e prático
dizer que `d[j]` vale 6, pois nenhuma distância `real` pode ser maior
que `5`.  Se adotarmos `c` igual a `3` no exemplo acima, teremos `d`
igual a:

image::{img}/matriz-conect2.png[scaledwidth="60%"]

Eis a ideia de um algoritmo que usa o conceito de fila para resolver
nosso problema:

 * uma cidade é considerada ativa se já foi visitada mas as estradas
   que começam nela ainda não foram exploradas;
 * mantenha uma fila das cidades ativas;
 * em cada iteração, remova da fila uma cidade i e insira na fila
   todas as cidades vizinhas de i que ainda não foram visitadas.

A seguir temos um programa que implementa este algoritmo para
encontrar a menor distância entre a cidade 0 e as demais 5 cidades.
Para fins de ilustração, a matriz de conectividade é gerada de forma
aleatória.

.Programa que utiliza uma fila para encontrar a menor distância entre um grupo de cidades
====
.Código fonte
{online}/dist.c[{local}/dist.c]

[source,c,numbered]
----
include::{local}/dist.c[]
----

====


===== Exercícios

. Seria possível implementar uma estrutura de fila com apenas um
  apontador para a cabeça da fila? Justifique sua resposta.
. Quais seriam os impactos dessa alteração na complexidade assintótica
  das suas funções?
. Quais seriam os impactos da remoção do campo `size` na complexidade
  assintótica das funções de manipulação de filas?
+
--
[TIP]
====
A funcionalidade de obter o tamanho da fila é importante, por isto, ao
remover o campo `size` você deverá adotar outra estratégia que
continue provendo a mesma funcionalidade: retornar o tamanho da fila.
====
--


=== Recapitulando

É importante fazer neste momento um paralelo entre o funcionamento de
estruturas FIFO, como as filas, e as estruturas LIFO, como as pilhas.
A figura abaixo ilustra bem estas diferentes. Estruturas do tipo FIFO
preservam a _ordem de chegada_ dos elementos enquanto que em
estruturas do tipo LIFO retornam a _ordem inversa_.

.Comparação do funcionamento de estruturas LIFO e FIFO
image::{img}/lifo.png[scaledwidth="60%"]

Observamos que em estruturas LIFO os elementos são inseridos e
removidos da mesma extremidade da estrutura. Em se tratando de uma
pilha, são inseridos e removidos do topo da pilha.  Já no caso de uma
estrutura FIFO, os elementos são inseridos em uma extremidade (cauda
da fila) e removidos da outra extremidade (cabeça da fila).

Estas são duas das principais estruturas de dados que estudaremos e,
apesar de apresentarem um funcionamento bastante simples, são
amplamente utilizadas na Ciência da Computação para a implementação de
soluções para os mais diversos problemas, desde a implementação de
jogos até a resolução de intrincados problemas de escalonamento.

// Sempre terminar o arquivo com uma nova linha.
